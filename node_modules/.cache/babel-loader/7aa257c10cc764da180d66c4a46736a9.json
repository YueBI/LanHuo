{"remainingRequest":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo-biyue/src/views/nested/fenceCreate/fenceInCreate/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo-biyue/src/views/nested/fenceCreate/fenceInCreate/index.vue","mtime":1557176484000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _parseFloat2 = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/parse-float\"));\n\nvar _promise = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/promise\"));\n\nvar _stringify = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _parseInt2 = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/parse-int\"));\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar d3 = _interopRequireWildcard(require(\"d3\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import '../../static/css/gateMana/common.css'\n// import '../../static/css/gateMana/dianziweilan.css'\n// import '../../static/js/iconfont.js'\n// 禁用浏览器右击事件\ndocument.oncontextmenu = function (e) {\n  e.preventDefault();\n};\n\nvar _default = {\n  created: function created() {\n    this.addBusinessVisible(); // this.draw = SVG('svgDemo').size('100%', '100%')\n    // console.log(document.getElementById('selectShape').currentScale)\n    // window.getElementById('selectShape').currentScale = window.documen.getElementById('selectShape').currentScale * 1.5\n  },\n  data: function data() {\n    return {\n      options: {\n        text: '测试加载',\n        target: document.getElementById('el-table')\n      },\n      pForm: {\n        cx: 0,\n        cy: 0\n      },\n      buildOptions: [],\n      floorOptions: [],\n      addWidth: '',\n      // 增加商家和偏移宽度\n      addBusLabelWidth: '',\n      // 增加商家标签偏移宽度\n      tableWidth: '',\n      // 表格宽度\n      loadingText: '正在拼命加载中,请稍等......',\n      addBusVisible: false,\n      // 增加商家是否可见\n      loading2: false,\n      // 加载\n      loading: false,\n      // 页面加载\n      Note: '',\n      // 提交提示\n      pointVisible: false,\n      // 加载弹窗是否显示\n      svg: function svg() {\n        // 地图svg对象\n        var svgDiv = d3.select(this.$el).selectAll('#svgmap');\n        var svg = svgDiv.selectAll('svg');\n        return svg;\n      },\n      svgAdd: function svgAdd() {\n        // 地图svg对象\n        var svgDiv = d3.select(this.$el).select('.svgAdd').select('#svgmap');\n        var svg = svgDiv.select('svg');\n        return svg;\n      },\n      viewBox: function viewBox() {\n        // svg中的viewBox属性\n        // let svgDiv = d3.select(this.$el).select('#svgmap')\n        // let svg = svgDiv.select('svg')\n        var viewBox = this.svg().attr('viewBox').split(' ');\n\n        for (var i = 0; i < viewBox.length; i++) {\n          viewBox[i] = (0, _parseInt2.default)(viewBox[i]);\n        }\n\n        return viewBox;\n      },\n      svgSelect: {\n        addpointVisible: true,\n        // 增加商家地图上方坐标位置是否可见\n        center: [],\n        // 选到的中心坐标\n        centerXList: [],\n        // 中心X坐标数组\n        centerYList: [],\n        // 中心Y坐标数组\n        isCursor: false,\n        // 是否选择右上角标记\n        svgStr: '',\n        floorList: [{\n          select: 'F1'\n        }, {\n          select: 'F2'\n        }, {\n          select: 'F3'\n        }] // 机场楼层数目列表\n\n      },\n      markClick: false,\n      // 地图右上角标记点\n      clientX: 0,\n      // 存储x的坐标\n      clientY: 0,\n      // 存储y的坐标\n      fileList: [],\n      addVisible: false,\n      filterForm: {\n        buildName: '',\n        floor: 0\n      },\n      formLabelWidth: '30%',\n      addForm: {\n        pointAddress: '',\n        placeName: '',\n        // 商家名称\n        latitude: '',\n        longitude: '',\n        address: '',\n        floor: 1,\n        cx: 0,\n        cy: 0,\n        labelIds: [],\n        labelList: [],\n        terminalId: [],\n        terminalName: []\n      },\n      addRules: {}\n    };\n  },\n  computed: {\n    setAddPoint: function setAddPoint() {\n      return this.addForm.floor + 'F (' + this.addForm.longitude + ',' + this.addForm.latitude + ')';\n      /**\r\n       * self.addForm.latitude = self.svgSelect.center[0]\r\n          self.addForm.longitude = self.svgSelect.center[1]\r\n          self.editForm.latitude = self.svgSelect.center[0]\r\n          self.editForm.longitude = self.svgSelect.center[1]\r\n       */\n    }\n  },\n  methods: {\n    /** ************************************* 前端显示选择地图等 *************************************** */\n    getCenterFun: function getCenterFun(pointList) {\n      function Point(x, y) {\n        this.x = x;\n        this.y = y;\n      } // Contour object\n\n\n      function Contour(a) {\n        this.pts = []; // an array of Point objects defining the contour\n      }\n\n      Contour.prototype.area = function () {\n        var area = 0;\n        var pts = this.pts;\n        var nPts = pts.length;\n        var j = nPts - 1;\n        var p1;\n        var p2;\n\n        for (var i = 0; i < nPts; j = i++) {\n          p1 = pts[i];\n          p2 = pts[j];\n          area += p1.x * p2.y;\n          area -= p1.y * p2.x;\n        }\n\n        area /= 2;\n        return area;\n      };\n\n      Contour.prototype.centroid = function () {\n        var pts = this.pts;\n        var nPts = pts.length;\n        var x = 0;\n        var y = 0;\n        var f;\n        var j = nPts - 1;\n        var p1;\n        var p2;\n\n        for (var i = 0; i < nPts; j = i++) {\n          p1 = pts[i];\n          p2 = pts[j];\n          f = p1.x * p2.y - p2.x * p1.y;\n          x += (p1.x + p2.x) * f;\n          y += (p1.y + p2.y) * f;\n        }\n\n        f = this.area() * 6;\n        return new Point({\n          x: x / f,\n          y: y / f\n        });\n      };\n\n      var polygon = pointList;\n      var con = new Contour();\n      con.pts = polygon;\n      var c = con.centroid();\n      c.x.x = c.x.x.toFixed(4);\n      c.x.y = c.x.y.toFixed(4);\n      return c.x;\n    },\n    // 初始化地图时设置每个地区的地标\n    initAllStyle: function initAllStyle(Form, svgStr) {\n      // let floor = svgStr.split('shougang')[1].split('.')[0]\n      // let self = this\n      d3.selectAll('.businessSelect').remove();\n      d3.selectAll('.haveselect').remove();\n      var para = {\n        header: (0, _stringify.default)({\n          token: sessionStorage.getItem('token')\n        }),\n        body: (0, _stringify.default)({})\n      };\n      console.log(para);\n    },\n    // 加载svg地图文件\n    loadSvgMap: function loadSvgMap(svgStr, Form) {\n      var self = this;\n      var svgDiv = d3.select(this.$el).selectAll('#svgmap');\n      var promise = new _promise.default(function (resolve, reject) {\n        // 地图加载完之后在执行\n        // 载入svg文件\n        d3.xml(svgStr, function (xml) {\n          // 获取xml文件内容，并转化为string字符串\n          var strinit = xml.documentElement;\n          var str = '';\n\n          if (strinit.outerHTML) {\n            str = strinit.outerHTML;\n          } else {\n            var div = document.createElement('div');\n            div.appendChild(strinit);\n            str = div.innerHTML;\n          } // 在div中插入svg地图\n\n\n          svgDiv.html(str); // 选取svg对象\n\n          var svg = svgDiv.selectAll('svg');\n          var storage = window.localStorage;\n          storage.originViewBox = svg.attr('viewBox');\n          svg.attr('width', 800).attr('height', 500);\n          self.initAllStyle(Form, svgStr); // 初始化地图，设置每个地区的地标，各个样式等\n\n          resolve();\n        });\n      }); // 地图加载完成\n\n      promise.then(function () {\n        self.bindDrag(Form);\n      }); // promise.then(this.bindDrag)\n\n      promise.then(function () {\n        self.bindClick(Form);\n      });\n    },\n    // 绑定拖动事件drag\n    bindDrag: function bindDrag(Form) {\n      var _svg = this.svg();\n\n      if (Form === 'addForm') {\n        _svg = this.svgAdd();\n      } // 获得原始svg的viewBox属性\n\n\n      var storage = window.localStorage;\n      var originViewBox = storage.originViewBox.split(' ');\n      /**\r\n         * 修改viewBox完成平移缩放\r\n         * **/\n\n      var drag = d3.drag().on('start', function (d) {}).on('end', function (d) {}).on('drag', function (d) {\n        d3.select(this) // 移动效果就是改变viewBox（0,0,1000,1000）的前两个值\n        .attr('viewBox', function (d) {\n          var viewBox = _svg.attr('viewBox').split(' '); // 拆分viewBox的值为数组\n\n\n          var ratio = 500 / viewBox[2];\n          var flagx = 1; // 图片水平方向是否能够拖动，1为能\n\n          var flagy = 1; // 图片竖直方向是否能够拖动，0为不能\n          // 以下为判断图片水平和竖直方向能否拖动\n\n          if ((0, _parseInt2.default)(viewBox[0]) + (0, _parseInt2.default)(viewBox[2]) <= (0, _parseInt2.default)(viewBox[2]) && d3.event.dx >= 0) {\n            flagx = 0;\n            viewBox[0] = 0;\n          }\n\n          if ((0, _parseInt2.default)(viewBox[0]) + (0, _parseInt2.default)(viewBox[2]) >= (0, _parseInt2.default)(originViewBox[2]) && d3.event.dx < 0) {\n            flagx = 0;\n            viewBox[0] = (0, _parseInt2.default)(originViewBox[2]) - (0, _parseInt2.default)(viewBox[2]);\n          }\n\n          if ((0, _parseInt2.default)(viewBox[2]) === (0, _parseInt2.default)(originViewBox[2])) {\n            flagx = 0;\n            viewBox[0] = 0;\n          }\n\n          if ((0, _parseInt2.default)(viewBox[1]) + (0, _parseInt2.default)(viewBox[3]) <= (0, _parseInt2.default)(viewBox[3])) {\n            if ((0, _parseInt2.default)(viewBox[1]) + (0, _parseInt2.default)(viewBox[3]) <= (0, _parseInt2.default)(viewBox[3]) && d3.event.dy <= 0) {\n              flagy = 1;\n            } else {\n              flagy = 0;\n              viewBox[1] = 0;\n            }\n          }\n\n          if ((0, _parseInt2.default)(viewBox[1]) + (0, _parseInt2.default)(viewBox[3]) >= (0, _parseInt2.default)(originViewBox[3])) {\n            if (d3.event.dy >= 0 && (0, _parseInt2.default)(viewBox[1]) + (0, _parseInt2.default)(viewBox[3]) >= (0, _parseInt2.default)(originViewBox[3])) {\n              flagy = 1;\n            } else {\n              flagy = 0;\n              viewBox[1] = (0, _parseInt2.default)(originViewBox[3]) - (0, _parseInt2.default)(viewBox[3]);\n            }\n          }\n\n          if ((0, _parseInt2.default)(viewBox[3]) === (0, _parseInt2.default)(originViewBox[3])) {\n            flagy = 0;\n          }\n\n          if (flagx) {\n            viewBox[0] = (0, _parseInt2.default)(viewBox[0]) - d3.event.dx / ratio;\n          } else {}\n\n          if (flagy) {\n            viewBox[1] = (0, _parseInt2.default)(viewBox[1]) - d3.event.dy / ratio;\n          } else {}\n\n          var viewBoxStr = \"\".concat(viewBox[0], \" \").concat(viewBox[1], \" \").concat(viewBox[2], \" \").concat(viewBox[3]); // 拼接为viewBox字符串\n\n          return viewBoxStr;\n        });\n      });\n\n      _svg.call(drag);\n    },\n    // 绑定点击事件\n    bindClick: function bindClick(Form) {\n      var self = this; // 选择所有的多边形polygon\n\n      var polygon = this.svg().selectAll('polygon');\n      var rect = this.svg().selectAll('rect');\n      var pointVisible = '';\n      Form === 'addForm' ? pointVisible = 'addpointVisible' : pointVisible = 'editpointVisible'; // 绑定鼠标按下矩形时事件\n\n      rect.on('mousedown', function () {\n        // 获取具体的鼠标事件，0为左键，1为滚轮，2为右键\n        var button = d3.event.button;\n        var selfD3 = d3.select(this); // let color = selfD3.attr('fill')\n\n        if (button === 2 && self.markClick === false || button === 0 && self.markClick === true) {\n          self.svgSelect[pointVisible] = true; // 获得鼠标选取的矩形平均中心点\n\n          self.svgSelect.center = self.getRectCenter(selfD3);\n          self[Form].latitude = self.svgSelect.center.y;\n          self[Form].longitude = self.svgSelect.center.x;\n          self[Form].pointAddress = self[Form].floor + 'F (' + self[Form].longitude + ', ' + self[Form].latitude + ')';\n          self[Form].cx = self[Form].longitude;\n          self[Form].cy = self[Form].latitude;\n          console.log(self[Form].cx);\n\n          if (self.svgSelect.center.x) {\n            d3.selectAll('.haveselect').remove();\n            d3.selectAll('.editselect').remove();\n            var location = d3.selectAll('#XMLID_1_').append('g').attr('transform', function (d) {\n              // 计算标注点的位置\n              return 'translate(' + (0, _parseFloat2.default)(self.svgSelect.center.x) + ',' + (0, _parseFloat2.default)(self.svgSelect.center.y) + ')';\n            });\n            location.append('svg:image').attr('class', 'haveselect').attr('xlink:href', '../../static/img/icon.png').attr('width', 50).attr('height', 50).attr('x', -25).attr('y', -45); // .attr('y', -40)\n\n            location.append('svg:circle').attr('cx', -30).attr('cy', -30).attr('r', 20);\n          }\n\n          self.svgSelect.center = [];\n        } else if (button === 2 && self.markClick === true) {\n          self.svgSelect[pointVisible] = true;\n          self.markClick = false;\n        }\n      }); // 绑定鼠标按下多边形事件\n\n      polygon.on('mousedown', function () {\n        // 获取具体的鼠标事件，0为左键，1为滚轮，2为右键\n        var button = d3.event.button;\n        var selfD3 = d3.select(this); // let color = selfD3.attr('fill')\n\n        if (button === 2 && self.markClick === false || button === 0 && self.markClick === true) {\n          self.svgSelect[pointVisible] = true;\n\n          if (self.markClick === true) {} // 取消标记\n          // self.markClick = false\n          // 获得鼠标选取的多边形平均中心点\n\n\n          self.svgSelect.center = self.getPolygonCenter(selfD3.attr('points').split(' '));\n          self[Form].latitude = self.svgSelect.center.y;\n          self[Form].longitude = self.svgSelect.center.x;\n          self[Form].pointAddress = self[Form].floor + 'F (' + self[Form].longitude + ', ' + self[Form].latitude + ')';\n          self[Form].cx = self[Form].longitude / 10;\n          self[Form].cy = self[Form].latitude / 10;\n          console.log(self[Form].cx);\n\n          if (self.svgSelect.center.x) {\n            d3.selectAll('.haveselect').remove();\n            d3.selectAll('.editselect').remove();\n            var location = d3.selectAll('#XMLID_1_').append('g').attr('transform', function (d) {\n              // 计算标注点的位置\n              return 'translate(' + (0, _parseFloat2.default)(self.svgSelect.center.x) + ',' + (0, _parseFloat2.default)(self.svgSelect.center.y) + ')';\n            });\n            location.append('svg:image').attr('class', 'haveselect').attr('xlink:href', '../../static/img/icon.png').attr('width', 60).attr('height', 60).attr('x', -30).attr('y', -45);\n            location.append('svg:circle').attr('cx', -30).attr('cy', -30).attr('r', 20);\n          }\n        } else if (button === 2 && self.markClick === true) {\n          self.svgSelect[pointVisible] = true;\n          self.markClick = false;\n        }\n      }); // 整个svg绑定一个右击事件，取消标记的选择状态\n\n      this.svg().on('mousedown', function () {\n        var button = d3.event.button;\n\n        if (self.markClick === true) {\n          if (button === 2) {\n            self.markClick = false;\n          }\n        }\n      });\n    },\n    // 获取所选rect中心\n    getRectCenter: function getRectCenter(selfD3) {\n      var finalList = []; // 最终中心点\n\n      var initx = (0, _parseFloat2.default)(selfD3.attr('x')) + (0, _parseFloat2.default)(selfD3.attr('width')) / 2;\n      var inity = (0, _parseFloat2.default)(selfD3.attr('y')) + (0, _parseFloat2.default)(selfD3.attr('height')) / 2;\n\n      if (selfD3.attr('transform')) {\n        var pointsAttr = selfD3.attr('transform').split('matrix')[1].split('(')[1].split(')')[0].split(' ');\n        var pointsAttrList = []; // 对矩形transform属性进行处理得到的数组\n\n        for (var i = 0; i < pointsAttr.length; i++) {\n          if (pointsAttr[i] !== '') {\n            pointsAttrList.push(pointsAttr[i]);\n          }\n        } // a,b,c,d,e,f为rect中的transform(matrix)属性\n\n\n        var a = (0, _parseFloat2.default)(pointsAttrList[0]);\n        var b = (0, _parseFloat2.default)(pointsAttrList[1]);\n        var c = (0, _parseFloat2.default)(pointsAttrList[2]);\n        var d = (0, _parseFloat2.default)(pointsAttrList[3]);\n        var e = (0, _parseFloat2.default)(pointsAttrList[4]);\n        var f = (0, _parseFloat2.default)(pointsAttrList[5]);\n        finalList.push({\n          'x': (a * initx + inity * c + e).toFixed(4),\n          'y': (b * initx + inity * d + f).toFixed(4)\n        });\n      } else {\n        finalList.push({\n          'x': initx.toFixed(4),\n          'y': inity.toFixed(4)\n        });\n      }\n\n      return finalList[0];\n    },\n    // 获得所选polygon中心\n    getPolygonCenter: function getPolygonCenter(pointsAttr) {\n      var pointsAttrList = []; // 对多边形points属性进行处理得到的数组\n\n      for (var i = 0; i < pointsAttr.length; i++) {\n        if (pointsAttr[i] !== '') {\n          pointsAttrList.push(pointsAttr[i]);\n        }\n      }\n\n      var totalList = [];\n      var totalCenter = '';\n\n      for (var _i = 0; _i < pointsAttrList.length; _i++) {\n        totalList.push({\n          'x': (0, _parseFloat2.default)(pointsAttrList[_i].split(',')[0]),\n          'y': (0, _parseFloat2.default)(pointsAttrList[_i].split(',')[1])\n        });\n      } // var polygon = [\n      //   {'x': 770.3423, 'y': 400.5555},\n      //   {'x': 529.3434, 'y': 643.2353},\n      //   {'x': 320.3455, 'y': 494.8865},\n      //   {'x': 424.3477, 'y': 381.5678},\n      //   {'x': 459.3488, 'y': 369.2332}\n      // ]\n\n\n      totalCenter = this.getCenterFun(totalList);\n      return totalCenter;\n    },\n    // 改变viewBox的大小，形成地图缩放的效果\n    // i<0，扩大viewBox，视觉效果位地图缩小\n    changeViewBoxSize: function changeViewBoxSize(i) {\n      // 获取原始viewBox\n      var storage = window.localStorage;\n      var originViewBox = storage.originViewBox.split(' ');\n      var viewMax = (0, _parseInt2.default)(originViewBox[2]); // viewBox最大值\n\n      var viewMin = (0, _parseInt2.default)(originViewBox[2]) - 100 * 5; // viewBox最小值\n\n      var viewBox = this.viewBox();\n\n      if (i < 0) {\n        // 注：viewBox[2]越大，则显得地图越小，所以点击缩小即为增加viewBox[2]和[3]\n        // 如果viewBox大小的值大于最大值，直接赋值最大值\n        viewBox[2] >= viewMax ? viewBox[2] = viewBox[3] = viewMax : viewBox[2] = viewBox[3] = viewBox[2] + 100;\n      } else {\n        viewBox[2] <= viewMin ? viewBox[2] = viewBox[3] = viewMin : viewBox[2] = viewBox[3] = viewBox[2] - 100;\n      } // 设置viewBox属性\n\n\n      var viewBoxStr = \"\".concat(viewBox[0], \" \").concat(viewBox[1], \" \").concat(viewBox[2], \" \").concat(viewBox[3]);\n      this.svg().attr('viewBox', viewBoxStr);\n    },\n    // 标记选择状态\n    markClickButton: function markClickButton() {\n      this.markClick = true;\n    },\n    // 获取鼠标当前的坐标\n    getXY: function getXY(event) {\n      this.clientX = event.clientX;\n      this.clientY = event.clientY;\n    },\n\n    /** ************************************* 前端处理数据格式，显示等 *************************************** */\n    // 点击关闭增加商家，取消地图所选商家，\n    closeAddPoint: function closeAddPoint() {\n      this.addForm.pointAddress = '';\n      this.svgSelect.addpointVisible = false;\n      d3.selectAll('.haveselect').remove();\n    },\n    // 点击关闭增加商家弹窗时重置addForm数据\n    clearAddForm: function clearAddForm() {\n      this.$nextTick(function () {\n        var _this = this;\n\n        this.$refs['addForm'].resetFields();\n        this.svgSelect.floorList.forEach(function (item) {\n          if (!item.active) {\n            _this.$set(item, 'active');\n          }\n\n          _this.$set(item, 'active', false);\n        });\n      }); // this.$refs['uploadImg'].uploadFiles = []\n\n      this.setLabelDropDown(this.addForm.allLabelList, 'addForm');\n      this.svgSelect.addpointVisible = false;\n      this.addForm.floor = 1; // this.addForm.floor = 3\n\n      this.addForm.address = '';\n      this.addImgVisible = true;\n    },\n    // 重置表单\n    resetForm: function resetForm(formName) {\n      this.$nextTick(function () {\n        this.$refs[formName].resetFields();\n\n        if (formName === 'addForm') {\n          this.$refs['uploadImg'].clearFiles();\n        }\n      });\n    },\n    // 点击弹窗“关闭”提交数据增加商家\n    submitAddBus: function submitAddBus() {\n      var _this2 = this;\n\n      this.$refs['addForm'].validate(function (valid) {\n        if (valid) {\n          _this2.selectLabel('addForm'); // 选择标签后再次保存\n\n\n          var file = _this2.$refs['uploadImg'].uploadFiles[0];\n\n          if (_this2.addForm.pointAddress === '') {\n            _this2.$message.warning('请在基本资料中选择商家坐标');\n\n            return false;\n          }\n\n          if (_this2.addForm.labelIds.length === 0) {\n            _this2.$message.warning('请在标签设置中选择商家标签');\n\n            return false;\n          }\n\n          if (file) {\n            _this2.$refs.uploadImg.submit();\n          } else {\n            _this2.addBusinessFro();\n          }\n        }\n      });\n    },\n    // 点击增加商家按钮\n    addBusinessVisible: function addBusinessVisible() {\n      var _this3 = this;\n\n      this.addBusVisible = true;\n      this.BusVisible = false;\n      this.editBusVisible = false;\n      this.addBusLabelVisible = false; // this.addVisible = true\n      // 元素加载完成后加载地图\n\n      this.$nextTick(function () {\n        var svgStr = '../../static/shougang1.svg'; // let svgStr = '../../../static/shougang1.svg'\n\n        _this3.loadSvgMap(svgStr, 'addForm');\n\n        _this3.addForm.pointAddress = ''; // 点击增加商家初始化地图上方选择图标位置，毕竟编辑中的覆盖\n      });\n    },\n    // 增加商家“删除”暂存列表图片\n    addhandleRemove: function addhandleRemove(file, fileList) {\n      this.addImgVisible = true;\n    },\n    // 重置表单\n    resetError: function resetError(formName) {\n      this.$nextTick(function () {\n        this.$refs[formName].resetFields();\n      });\n    },\n\n    /** ************************************* 提交后台相关函数 *************************************** */\n    // 向后台和图片一起提交添加商家表单\n    addBusinessFro: function addBusinessFro() {\n      var file = this.$refs['uploadImg'].uploadFiles[0]; // let fileValue = document.querySelector('.el-upload-img .el-upload__input')\n\n      var para = new FormData();\n\n      if (file) {\n        // 如果有图片\n        para.append('imge', file.raw);\n      } // this.addForm.labelIds = [1, 2, 3]\n\n\n      para.append('header', (0, _stringify.default)({\n        'token': sessionStorage.getItem('token'),\n        'beanId': 'businessManageService_v1'\n      }));\n      para.append('body', (0, _stringify.default)({\n        // 'address': this.addForm.airportName + this.addForm.terminalName + this.addForm.floor + '楼',\n        'address': this.addForm.address,\n        'airportId': this.addForm.airportId,\n        'placeName': this.addForm.placeName,\n        'latitude': this.addForm.latitude,\n        'longitude': this.addForm.longitude,\n        'floor': this.addForm.floor,\n        'labelIds': this.addForm.labelIds,\n        'terminalId': this.addForm.terminalId[0]\n      }));\n      this.addForm.file = file; // apiBus.addBusiness(para).then(res => {\n\n      console.log(para);\n    }\n  },\n  watch: {\n    // 监测标记按钮是否点击\n    markClick: function markClick(newMark, oldMark) {\n      if (newMark === true) {\n        // 如果点击，切换鼠标为画笔样式\n        this.svgSelect.isCursor = true;\n        /* let span = d3.select(this.$el).append('span')\r\n        span.text('鼠标左键点击，鼠标右键取消')\r\n          .style('position', 'absolute')\r\n          .style('left', this.clientX + 20 + 'px')\r\n          .style('top', this.clientY + 'px')\r\n          // 绑定鼠标移动事件\r\n        document.onmousemove = function (e) {\r\n          span.style('left', e.clientX + 20 + 'px')\r\n          span.style('top', e.clientY + 'px')\r\n        } */\n      } else if (newMark === false) {\n        // d3.select(this.$el).select('span').remove()\n        this.svgSelect.isCursor = false;\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.tableWidth = document.body.scrollWidth - 239 - 20;\n    this.addWidth = (document.body.scrollWidth - 219) / 2 - 800 / 2 - 200;\n    this.addBusLabelWidth = (document.body.scrollWidth - 219) / 2 - 944 / 2 - 20;\n  }\n};\nexports.default = _default;",null]}