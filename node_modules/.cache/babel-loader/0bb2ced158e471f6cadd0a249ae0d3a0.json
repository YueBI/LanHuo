{"remainingRequest":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/dengyuankang/showTrack.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/dengyuankang/showTrack.vue","mtime":1569209068313},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/objectSpread\"));\n\nvar _vuex = require(\"vuex\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar d3 = _interopRequireWildcard(require(\"d3\"));\n\nvar _map = _interopRequireDefault(require(\"@/assets/map1.jpg\"));\n\nvar _start = _interopRequireDefault(require(\"@/assets/start.png\"));\n\nvar _end = _interopRequireDefault(require(\"@/assets/end.png\"));\n\nvar _icon = _interopRequireDefault(require(\"@/assets/icon.png\"));\n\nvar _infor = _interopRequireDefault(require(\"@/assets/infor.png\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 引入json文件\nvar _default = {\n  name: 'Dashboard',\n  data: function data() {\n    return {\n      // 存放轨迹json文件\n      trackData: [],\n      // 回放时的轨迹点的索引\n      num: 0,\n      // 定时器名称\n      timer: null\n    };\n  },\n  computed: (0, _objectSpread2.default)({}, (0, _vuex.mapGetters)(['name'])),\n  mounted: function mounted() {\n    this.map();\n  },\n  created: function created() {\n    // 在这保存json文件到trackData中\n    this.trackData = myData;\n  },\n  methods: {\n    // 显示地图\n    map: function map() {\n      var _this = this;\n\n      // 获取轨迹信息\n      _axios.default.post('http://112.74.189.126:8080/bluefire/Integererface/data_manage/getIndoorTrajectoryDetail', {\n        trajectoryId: this.$route.query.trajectoryId\n      }).then(function (response) {\n        console.log('接收成功');\n        _this.trackData = response.data.content.list;\n      }, function (err) {\n        console.log('接收失败');\n      }); // 获得svg标签\n\n\n      var svg = d3.select('#mapCon'); // 添加地图\n\n      var imgs = svg.selectAll('image');\n      imgs.data([0]).enter().append('svg:image').attr('xlink:href', _map.default);\n    },\n    myTrack: function myTrack() {\n      // 添加轨迹\n      var svg = d3.select('#mapCon');\n      var start = true;\n      var path = ''; // foreach读取json中的每个坐标的位置，并连接坐标形成路径，用path画出\n\n      this.trackData.forEach(function (item) {\n        console.log('1');\n        var x = item.x / 1019 * 4167;\n        var y = item.y / 1219 * 2190; // 圆是最初想用来表示轨迹，发现坐标部分间隔太远，改用path\n\n        var circle2 = svg.append('circle').attr('cx', x).attr('cy', y).attr('r', 20).style('fill', 'purple');\n\n        if (start) {\n          path += 'M' + x + ' ' + y + ' ';\n          start = false;\n        } else {\n          path += 'L' + x + ' ' + y + ' ';\n        }\n      }); // 添加路径\n\n      svg.append('path').attr('fill', 'transparent').attr('stroke', '#000000').attr('stroke-width', '25').attr('stroke-linecap', 'round').attr('v-bind:id', 'moveTrack').attr('d', path); // 添加起点和终点的标注\n\n      var start = this.trackData[0];\n      var end = this.trackData[this.trackData.length - 1];\n      var startIcon = 'translate(' + (start.x / 1019 * 4167 - 80) + ',' + (start.y / 1219 * 2190 - 200) + ')';\n      var endIcon = 'translate(' + (end.x / 1019 * 4167 - 80) + ',' + (end.y / 1219 * 2190 - 200) + ')';\n      var location1 = svg.append('g').attr('transform', startIcon);\n      location1.append('svg:image').attr('xlink:href', _start.default).attr('width', '200px').attr('height', '200px');\n      var location2 = svg.append('g').attr('transform', endIcon);\n      location2.append('svg:image').attr('xlink:href', _end.default).attr('width', '200px').attr('height', '200px');\n    },\n    // 开始播放，设置循环执行函数，每0.5s执行一次\n    start: function start() {\n      // 防止多次添加循环执行函数\n      if (!this.timer) {\n        this.timer = setInterval(this.showTrack, 500);\n      }\n    },\n    // 暂停播放\n    pause: function pause() {\n      // 防止多次删除循环执行函数\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n\n      this.timer = null;\n    },\n    // 重置播放\n    reset: function reset() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n\n      this.num = 0;\n      var svg = d3.select('#mapCon');\n      svg.select('#persentLocation').remove();\n      svg.selectAll('.persentInf').remove();\n      svg.select('.inforContent').remove();\n    },\n    // 要循环执行的函数,每次循环删去前一个轨迹点，显示新的轨迹点\n    showTrack: function showTrack() {\n      var svg = d3.select('#mapCon');\n      var item = this.trackData[this.num];\n      var x = item.x / 1019 * 4167;\n      var y = item.y / 1219 * 2190;\n      var time = item.time;\n      console.log(this.num);\n      console.log('x:' + x);\n      console.log('y:' + y);\n      svg.select('#persentLocation').remove();\n      svg.selectAll('.persentInf').remove();\n      svg.select('.inforContent').remove(); // 轨迹点\n\n      var circle = svg.append('circle').attr('cx', x).attr('cy', y).attr('r', 20).style('fill', 'red').attr('id', 'persentLocation'); // 提示框气泡\n\n      var offset = 'translate(' + (x - 320) + ',' + (y - 440) + ')';\n      var scale = 'scale(2.8 1.5)';\n      var location = svg.append('g').attr('class', 'inforContent');\n      var image = location.append('image').attr('transform', offset + scale).attr('xlink:href', _infor.default); // .attr(\"transform\",\"scale(2 1)\");\n      // 提示内容\n\n      var text = svg.append('text').attr('x', x + 20).attr('y', y - 260).text('x: ' + item.x).style('font-size', '70px').attr('class', 'persentInf');\n      var text2 = svg.append('text').attr('x', x + 20).attr('y', y - 180).text('y: ' + item.y).style('font-size', '70px').attr('class', 'persentInf');\n      var text3 = svg.append('text').attr('x', x + 20).attr('y', y - 100).text('time: ' + time).style('font-size', '70px').attr('class', 'persentInf');\n      this.num += 1;\n\n      if (this.num >= this.trackData.length) {\n        clearInterval(this.timer);\n        this.num = 0;\n      }\n    }\n  }\n};\nexports.default = _default;",null]}