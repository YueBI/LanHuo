{"remainingRequest":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo-biyue/src/views/dashboard/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo-biyue/src/views/dashboard/index.vue","mtime":1557709353263},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _parseInt2 = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/parse-int\"));\n\nvar _now = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/date/now\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar d3 = _interopRequireWildcard(require(\"d3\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _similarity = _interopRequireDefault(require(\"@/api/similarity.js\"));\n\nvar _map = _interopRequireDefault(require(\"@/assets/map1.png\"));\n\nvar _start = _interopRequireDefault(require(\"@/assets/start.png\"));\n\nvar _end = _interopRequireDefault(require(\"@/assets/end.png\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import { constants } from 'crypto'\nvar _default = {\n  data: function data() {\n    return {\n      starttimeValue: null,\n      // 开始时间\n      endtimeValue: null,\n      // 结束时间\n      startTime: null,\n      // 开始时间临时值\n      endTime: null,\n      // 结束时间临时值\n      maps: [],\n      // 存储地图列表\n      selectedIndex: '',\n      // 下拉框选择地图时的索引值\n      mapid: '',\n      userAid: '',\n      userBid: '',\n      userData: [],\n      // 用户列表\n      similarityList: [],\n      // 相似度列表\n      selectVal: '',\n      // 用户输入框1 用户值\n      selectVal2: '',\n      // 用户输入框2 用户值\n      isShow: false,\n      // 是否显示用户列表以及确定按钮\n      flag: 0,\n      // 确定是哪个用户输入框\n      currentRow: null,\n      // 用户列表选中的行\n      isShowSimi: false,\n      // 是否显示相似度列表\n      indoorTrackData: '',\n      // 存放轨迹json文件\n      outdoorTrackData: '',\n      // 存放轨迹json文件\n      num: 0,\n      // 回放时的轨迹点的索引\n      timer: null,\n      // 定时器名称\n      track: null,\n      activeName: 'in',\n      // 室内或者室外\n      disabled: false,\n      showOutmap: false,\n      trackoutData: {},\n      // 存储室外轨迹数据的临时列表\n      trackDatas: [],\n      // 存储总的数据\n      times: 0,\n      x_test: 80,\n      y_test: 80,\n      points_list_2: [],\n      points_list_3: [],\n      now: \"\",\n      trajectoryId: 0,\n      //  记录室外地图轨迹id的选择\n      nowpoints: [],\n      markerArr: [],\n      plPoints: [],\n      loadingText: '正在拼命加载中，请稍等......',\n      // 相似度列表读取数据加载中\n      loading: false,\n      showdata: true,\n      userid: 0,\n      trajectorys: [],\n      namevalue: '',\n      idvalue: '',\n      showPath: false\n    };\n  },\n  mounted: function mounted() {\n    _elementUi.Message.closeAll();\n  },\n  computed: {\n    // 将开始时间和结束时间组成一个总的，之后就可以两者同时监测\n    timeValue: function timeValue() {\n      var starttimeValue = this.starttimeValue,\n          endtimeValue = this.endtimeValue;\n      return {\n        starttimeValue: starttimeValue,\n        endtimeValue: endtimeValue\n      };\n    }\n  },\n  watch: {\n    // 监测开始时间和结束时间，确保开始时间不能大于结束时间，以及两者都不能大于当前系统的时间，否则就会出现错误提示\n    timeValue: {\n      handler: function handler(time) {\n        if (this.selectedIndex === '' && this.activeName === 'in') {\n          this.starttimeValue = null;\n          this.endtimeValue = null;\n          this.errorMessage(\"请先选择地图，再进行时间段的选择\");\n        } else {\n          this.startTime = time.starttimeValue;\n          this.endTime = time.endtimeValue;\n\n          _elementUi.Message.closeAll();\n\n          if (this.startTime === null || this.endTime === null || this.startTime === '' || this.endTime === '') {\n            this.errorMessage('开始时间或者结束时间都不能为空!'); // 当起止时间有一个清空的时候，那么右侧的用户列表、相似度列表以及用户都要清空\n\n            this.selectVal = '';\n            this.selectVal2 = '';\n            this.isShow = false;\n            this.isShowSimi = false; // 并且显示出的筛选过的轨迹也要清空\n\n            var svg = d3.select('.app-main').select('svg');\n            svg.selectAll('circle').remove();\n            svg.selectAll('path').remove();\n            svg.selectAll('g').remove(); // svg.selectAll('.persentInf').remove();\n            // svg.select('.inforContent').remove();\n          } else if (new Date(this.startTime) > (0, _now.default)() || new Date(this.endTime) > (0, _now.default)()) {\n            // this.$refs.starttimeInput.$refs.reference.$refs.input.focus()\n            this.errorMessage('开始时间或结束时间都不能大于当前的时间！');\n          } else if (this.startTime > this.endTime) {\n            // this.$refs.starttimeInput.$refs.reference.$refs.input.focus()\n            this.errorMessage('开始时间不能大于结束时间');\n          } else {\n            // if (this.activeName === 'in') {\n            // 根据时间段绘制出该室内地图上的轨迹\n            this.showTrack(this.starttimeValue, this.endtimeValue); // } else {\n            //   // 绘制室外地图轨迹\n            //   var that = this\n            //   // 设置延迟，是为了点击时间进行选择后，等待一下时间下拉框的消失\n            //   setTimeout(function (){\n            //     that.showouttrack(\"black\")\n            //     // that.showAlltrajectory()\n            //   }, 500)\n            //   // 设置全局的加载\n            //   let loadingInstance = Loading.service({\n            //       lock: true,\n            //       text:'拼命绘制轨迹地图中...',\n            //       spinner: 'el-icon-loading',\n            //       background: 'rgba(0, 0, 0, 0.7)'\n            //   });\n            //   // 因为读取和绘制需要时间，所以要延迟加载\n            //   setTimeout(function (){\n            //     loadingInstance.close();\n            //   }, 500)\n            // }\n          }\n        }\n      },\n      deep: true\n    },\n    trajectoryId: {\n      // 监测轨迹id是否改变，一旦改变就更新存放数据的列表，绘制这个id轨迹\n      handler: function handler() {\n        console.log('数据开始传输');\n        this.hello();\n      }\n    },\n    selectedIndex: {\n      // 监测地图选择框的变化\n      handler: function handler() {\n        // console.log(this.selectedIndex)\n        _elementUi.Message.closeAll(); // 当地图更换以后，更新该地图的室内用户\n\n\n        this.showIndoorUsers(); // 每当地图选择变换的时候，如果界面中存在轨迹，需要清空，并且重新绘制选择的地图的轨迹信息\n        // 先将轨迹信息清空\n\n        var svg = d3.select('.app-main').select('svg');\n        svg.selectAll('circle').remove();\n        svg.selectAll('path').remove();\n        svg.selectAll('g').remove();\n        svg.selectAll('img').remove(); // 重新绘制\n\n        this.showTrack(this.starttimeValue, this.endtimeValue);\n      }\n    }\n  },\n  methods: {\n    ////////////////室内室外兼顾/////////////////////\n    // 选择室内地图还是室外地图\n    handleSelect: function handleSelect(index) {\n      _elementUi.Message.closeAll();\n\n      var svg = d3.select('.app-main').select('svg');\n      svg.selectAll('circle').remove();\n      svg.selectAll('path').remove();\n      svg.selectAll('g').remove();\n      svg.selectAll('img').remove();\n      this.starttimeValue = null;\n      this.endtimeValue = null;\n      this.selectVal = '';\n      this.selectVal2 = '';\n      console.log('清空数据');\n\n      if (index == 1) {\n        this.activeName = 'in'; // 将标志设置为室内\n\n        this.showOutmap = false; // 去除室外地图\n\n        this.disabled = false; // 激活选择地图下拉框\n\n        this.showdata = true; // this.starttimeValue = null // 将时间清空，因为室内必须选择地图之后，才能进行时间段的选择\n        // this.endtimeValue = null\n      } else {\n        this.mymap();\n        this.setMapEvent(); // 设置地图事件\n\n        this.addMapControl(); // 向地图添加控件\n        // this.showAlltrajectory() // 更新室外地图轨迹信息\n\n        this.activeName = 'out'; // 将标志设置为室外\n\n        this.disabled = true; // 禁用选择地图选择下拉框\n\n        this.showOutmap = true; // 显示室外地图\n\n        this.showdata = false;\n        this.showOutdoorUsers();\n      }\n\n      console.log(this.activeName); // console.log('清空数据')\n      // 转换室内或者室外之后要清空数据\n      // Message.closeAll()\n    },\n    // 当用户输入框获得焦点以后，则显示用户列表(当没有选择地图和时间段的时候会报错)\n    showList: function showList(flag) {\n      if (this.activeName === 'in') {\n        if (this.selectedIndex !== '' && this.starttimeValue !== '' && this.endtimeValue !== '' && this.starttimeValue !== null && this.endtimeValue !== null) {\n          _elementUi.Message.closeAll();\n\n          this.isShow = true;\n          this.isShowSimi = false;\n          this.flag = flag;\n          this.showIndoorUsers();\n        } else {\n          this.errorMessage('请先选择地图和时间段');\n        }\n      } else {\n        _elementUi.Message.closeAll();\n\n        this.isShow = true;\n        this.isShowSimi = false;\n        this.flag = flag; // this.showOutdoorUsers()\n      }\n    },\n    // 根据输入内容提供对应的输入建议 查询并返回建议列表的数据\n    querySearch: function querySearch(queryString, cb) {\n      var userData = this.userData;\n      var userdataList = [];\n\n      for (var i = 0; i < this.userData.length; i++) {\n        userdataList.push({\n          'value': userData[i].userName,\n          'id': userData[i].userID\n        });\n      }\n\n      var results = queryString ? userdataList.filter(this.createFilter(queryString)) : userdataList; // 调用 callback 返回建议列表的数据\n\n      cb(results);\n    },\n    createFilter: function createFilter(queryString) {\n      return function (userdataList) {\n        return userdataList.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    queryoutSearch: function queryoutSearch(queryString, cb) {\n      var trajectorys = this.trajectorys;\n      var trajectorysList = [];\n\n      for (var i = 0; i < this.trajectorys.length; i++) {\n        trajectorysList.push({\n          'value': String(trajectorys[i].trajectoryId)\n        });\n      }\n\n      var results = queryString ? trajectorysList.filter(this.createFilter(queryString)) : trajectorysList;\n      cb(results);\n    },\n    handleoutUserSelect: function handleoutUserSelect(item) {\n      var _this = this;\n\n      console.log(item); // print(item.id)\n\n      this.userid = item.id; // 更新用户的id\n\n      var para = {\n        \"userId\": this.userid,\n        \"startDate\": \"2018-3-5\",\n        \"endDate\": \"2018-3-6\"\n      };\n      var that = this;\n\n      _similarity.default.getOutdoorTrajectories(para).then(function (response) {\n        console.log(\"接收成功\"); // console.log(response.data.content.list[1])\n\n        _this.trajectorys = response.data.content.list;\n      });\n    },\n    handletrajectorySelect: function handletrajectorySelect(item) {\n      console.log(item);\n      var that = this;\n      this.trajectoryId = (0, _parseInt2.default)(item.value);\n      setTimeout(function () {\n        that.showouttrack('black');\n      }, 1000);\n\n      var loadingInstance = _elementUi.Loading.service({\n        lock: true,\n        text: '拼命绘制轨迹地图中...',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n\n      setTimeout(function () {\n        loadingInstance.close();\n      }, 1000);\n    },\n    handleUserSelect: function handleUserSelect(item) {\n      if (this.flag === 1) {\n        // this.selectVal = item.value // 当检测到是第一个用户选择框的时候，则将第一个选择框的值进行更新\n        this.userAid = item.id; // 更新用户的id\n\n        var linecolor = 'red';\n        var tid = 172;\n      } else {\n        // this.selectVal2 = row.userName // 当检测到是第二个用户选择框的时候，则将第二个选择框的值进行更新\n        this.userBid = item.id; // 更新用户的id\n\n        var linecolor = 'blue';\n        var tid = 173;\n      } // 判断是室内地图还是室外地图，然后进行用户地图绘制\n\n\n      if (this.activeName === 'in') {\n        // 室内地图\n        this.showUserTrack(this.flag);\n      } else {\n        // 室外地图\n        var that = this;\n        this.trajectoryId = tid;\n        setTimeout(function () {\n          that.showouttrack(linecolor);\n        }, 1000);\n\n        var loadingInstance = _elementUi.Loading.service({\n          lock: true,\n          text: '拼命绘制轨迹地图中...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        });\n\n        setTimeout(function () {\n          loadingInstance.close();\n        }, 1000);\n      }\n    },\n    // 当点击确定按钮之后，需要隐藏用户列表\n    hideList: function hideList() {\n      this.isShow = false;\n      this.currentRow = null;\n\n      if (this.selectVal !== '' && this.selectVal2 !== '') {\n        // 如果两个用户都有值，则需要显示相似度列表\n        this.isShowSimi = true;\n\n        if (this.activeName === 'in') {\n          // this.showIndoorSimilarity()\n          this.showOutdoorSimilarity(); // 当后台算法连接好接口以后偶，就可以转换成上面那一句\n        } else {\n          this.showOutdoorSimilarity();\n        }\n      }\n\n      this.setCurrent();\n    },\n    // 选中列表中的值以后，更新输入框的值\n    handleRowClick: function handleRowClick(row) {\n      if (this.flag === 1) {\n        this.selectVal = row.userName; // 当检测到是第一个用户选择框的时候，则将第一个选择框的值进行更新\n\n        this.userAid = row.userID; // 更新用户的id\n\n        var linecolor = 'red';\n        var tid = 172;\n      } else {\n        this.selectVal2 = row.userName; // 当检测到是第二个用户选择框的时候，则将第二个选择框的值进行更新\n\n        this.userBid = row.userID; // 更新用户的id\n\n        var linecolor = 'blue';\n        var tid = 187;\n      }\n\n      this.currentRow = row; // 将当前行存储下来\n      // 判断是室内地图还是室外地图，然后进行用户地图绘制\n\n      if (this.activeName === 'in') {\n        // 室内地图\n        this.showUserTrack(this.flag);\n      } else {\n        // 室外地图\n        var that = this;\n        this.trajectoryId = tid;\n        setTimeout(function () {\n          that.showouttrack(linecolor);\n        }, 1000);\n\n        var loadingInstance = _elementUi.Loading.service({\n          lock: true,\n          text: '拼命绘制轨迹地图中...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        });\n\n        setTimeout(function () {\n          loadingInstance.close();\n        }, 1000);\n      }\n    },\n    // 设置当前点击的行，传进去空的话就是取消选中状态\n    setCurrent: function setCurrent(row) {\n      this.$refs.singleTable.setCurrentRow(row);\n    },\n    // 错误信息方法\n    errorMessage: function errorMessage(mes) {\n      (0, _elementUi.Message)({\n        showClose: false,\n        message: mes,\n        type: 'error',\n        duration: 0\n      });\n    },\n    showSame: function showSame(row) {\n      // 如果界面中有图像，则要先清除\n      if (this.activeName == 'in') {\n        var svg = d3.select('.app-main').select('svg');\n        svg.selectAll('circle').remove();\n        svg.selectAll('path').remove();\n        svg.selectAll('g').remove();\n        svg.selectAll('img').remove();\n        this.showTrackSame(row);\n      } else {\n        this.showoutTrackSame(row);\n      }\n    },\n    ////////////////////室内////////////////////////////////\n    // 获取室内地图列表\n    showIndoorMap: function showIndoorMap() {\n      var _this2 = this;\n\n      // 获取室内地图列表\n      if (this.activeName === 'in') {\n        _similarity.default.queryIndoorMap().then(function (response) {\n          _this2.maps = response.data.content.list;\n          console.log(\"获得地图列表的信息成功\");\n        });\n      }\n    },\n    // 显示地图图片\n    map: function map(selectedIndex) {\n      // 获取图片位置以及地图的ID\n      this.mapid = this.maps[selectedIndex].mapId;\n      var mapImg = this.maps[selectedIndex].mapSrc;\n      var mapImg = _map.default; // 暂时用本地图片替代\n      // 通过接口获得图片，暂时还没测试成功\n      // let para = {\n      //   mapId: parseInt(this.mapid)\n      // }\n      // api.queryMapByMapId(para,{\n      //   // responseType: 'arraybuffer'\n      //   responseType: \"blob\"\n      // }).then(res => {\n      //   console.log('jinru')\n      //   const content = res\n      //   const blob = new Blob([content])\n      //   let url = window.URL.createObjectURL(blob)\n      //   console.log(url)\n      //   // var temp = require(url)\n      //   // console.log(temp)\n      //   this.addMap(url, selectedIndex)\n      //   // this.mapImg = url;\n      // }).catch(err => {\n      //   console.log('加载失败')\n      // });\n      // 添加图片\n\n      this.addMap(mapImg, selectedIndex);\n    },\n    addMap: function addMap(mapImg, selectedIndex) {\n      // 切换，如果那个位置有图片，需要先移除那个地方的图片再添加\n      if (d3.select('.app-main').selectAll('image').empty() === false) {\n        d3.selectAll('image').remove();\n      } // console.log(mapImg, selectedIndex)\n      //  获得svg标签\n\n\n      var svg = d3.select('.app-main').select('svg');\n      var imgs = svg.selectAll('images' + selectedIndex);\n      imgs.data([0]).enter().append('svg:image').attr('xlink:href', mapImg); // 添加位置标注图标，可用于用户位置的标注，目前还用不到\n      // var location1 = svg.append('g').attr('transform', 'translate(100,100)')\n      // location1.append('svg:image').attr('xlink:href', '../static/icon.png')\n      // var location2 = svg.append('g').attr('transform', 'translate(101,101)')\n      // location2.append('svg:image').attr('xlink:href', '../static/icon.png')\n    },\n    // 读取室内用户列表，并将用户列表进行更新\n    showIndoorUsers: function showIndoorUsers() {\n      var data;\n      var that = this;\n      var para = {\n        mapId: (0, _parseInt2.default)(this.mapid)\n      };\n\n      _similarity.default.getIndoorUsers(para).then(function (response) {\n        data = response.data.content.list;\n        console.log(\"获得用户列表的信息\");\n\n        if (data) {\n          var datalist = [];\n          data.forEach(function (item) {\n            var lists = {\n              'userID': '',\n              'userName': ''\n            };\n\n            if (item) {\n              lists['userID'] = item['userId'];\n              lists['userName'] = item['userName'];\n              datalist.push(lists);\n            }\n          });\n          that.userData = datalist;\n        }\n      });\n    },\n    // 显示室内轨迹相似度\n    showIndoorSimilarity: function showIndoorSimilarity() {\n      var _this3 = this;\n\n      this.loading = true;\n      var data;\n      var that = this;\n      var para = {\n        userAID: (0, _parseInt2.default)(this.userAid),\n        userBID: (0, _parseInt2.default)(this.userBid),\n        mapId: (0, _parseInt2.default)(this.mapid),\n        startDate: \"2008-07-04\",\n        endDate: \"2009-09-04\" // console.log(para)\n\n      };\n\n      _similarity.default.getIndoorSimilarity(para).then(function (response) {\n        // 获取室内用户相似度并更新相似度列表\n        _this3.loading = false;\n        data = response.data.content.trajectory; // data = response.data.content.list\n\n        console.log(\"获得室内相似度的信息\");\n        var dataitem = [];\n        data.forEach(function (item) {\n          dataitem.push({\n            trajectoryAid: item['trajectoryAID'],\n            trajectoryBid: item['trajectoryBID'],\n            similarity: item['similarity']\n          });\n        });\n        that.similarityList = dataitem;\n      });\n    },\n    // 当点击相似度那一行的时候，要在图中显示出轨迹\n    showTrackSame: function showTrackSame(row) {\n      var _this4 = this;\n\n      // 如果界面中有图像，则要先清除\n      var svg = d3.select('.app-main').select('svg');\n      svg.selectAll('circle').remove();\n      svg.selectAll('path').remove();\n      svg.selectAll('g').remove();\n      svg.selectAll('img').remove();\n      var data;\n      var that = this;\n      var link;\n      var para = {\n        trajectoryID: (0, _parseInt2.default)(row.trajectoryAid)\n      };\n      var parab = {\n        trajectoryID: (0, _parseInt2.default)(row.trajectoryBid)\n      };\n\n      _similarity.default.getIndoorTrajectoryDetail(para).then(function (response) {\n        console.log(response.data.content.list);\n        data = response.data.content.list; // data = data[para.trajectoryId]\n\n        console.log(\"获得该轨迹的详细信息\");\n        console.log(data); // // return data\n        // that.track = data\n\n        _this4.showTrackdots(data, 'blue'); // that.$forceUpdate()\n\n      });\n\n      _similarity.default.getIndoorTrajectoryDetail(parab).then(function (response) {\n        data = response.data.content.list; // data = data[parab.trajectoryId]\n\n        console.log(\"获得该轨迹的详细信息\");\n        console.log(data); // // return data\n        // that.track = data\n\n        _this4.showTrackdots(data, 'red'); // that.$forceUpdate()\n\n      });\n    },\n    // 显示室内该时间段用户轨迹点\n    showdots: function showdots() {\n      if (this.showPath) {\n        this.showTrack(this.starttimeValue, this.endtimeValue);\n      } else {\n        // 添加\n        var svg = d3.select('.app-main').select('svg');\n        svg.selectAll('path').remove();\n        svg.selectAll('g').remove();\n        svg.selectAll('img').remove();\n      }\n\n      this.showPath = !this.showPath; // this.trackDatas.forEach(function(item) {\n      //   var x = (item.x / 1019) * 4167 // 获取x轴坐标\n      //   var y = (item.y / 1019) * 4167 // 获取y轴坐标\n      //   svg.append('circle') // 紫色圆圈绘制，位置半径\n      //     .attr('cx', x)\n      //     .attr('cy', y)\n      //     .attr('r', 15)\n      //     .style('fill', 'red')\n      // })\n    },\n    // 显示室内单条轨迹\n    showTrackdots: function showTrackdots(indoorItem, color) {\n      // 添加轨迹\n      var svg = d3.select('.app-main').select('svg'); // var svg = d3.select('svg')\n\n      var start = true;\n      var path = ''; // foreach读取json中的每个坐标的位置，并连接坐标形成路径，用path画出\n\n      indoorItem.forEach(function (item) {\n        var x = item.x / 1019 * 4167; // 获取x轴坐标\n\n        var y = item.y / 1019 * 4167; // 获取y轴坐标\n        // var y = (item.y / 1219) * 2190 // 获取y轴坐标\n        // 圆是最初想用来表示轨迹，发现坐标部分间隔太远，改用path\n        // svg.append('circle') // 紫色圆圈绘制，位置半径\n        //   .attr('cx', x)\n        //   .attr('cy', y)\n        //   .attr('r', 25)\n        //   .style('fill', 'purple')\n\n        svg.append('circle') // 紫色圆圈绘制，位置半径\n        .attr('cx', x).attr('cy', y).attr('r', 15).style('fill', 'red');\n\n        if (start) {\n          path += 'M' + x + ' ' + y + ' ';\n          start = false;\n        } else {\n          path += 'L' + x + ' ' + y + ' ';\n        }\n      }); // 添加路径\n\n      svg.append('path').attr('fill', 'transparent').attr('stroke', color).attr('stroke-width', '15').attr('stroke-linecap', 'round').attr('v-bind:id', 'moveTrack').attr('d', path); // 添加起点和终点的标注\n\n      var startdot = indoorItem[0];\n      var enddot = indoorItem[indoorItem.length - 1]; // var startIcon = 'translate(' + ((startdot.x / 1019) * 4167 - 80) + ',' + ((startdot.y / 1219) * 2190 - 200) + ')'\n      // var endIcon = 'translate(' + ((enddot.x / 1019) * 4167 - 80) + ',' + ((enddot.y / 1219) * 2190 - 200) + ')'\n\n      var startIcon = 'translate(' + (startdot.x / 1019 * 4167 - 80) + ',' + (startdot.y / 1019 * 4167 - 80) + ')';\n      var endIcon = 'translate(' + (startdot.x / 1019 * 4167 - 80) + ',' + (startdot.y / 1019 * 4167 - 80) + ')';\n      var location1 = svg.append('g').attr('transform', startIcon);\n      location1.append('svg:image').attr('xlink:href', _start.default).attr('width', '200px').attr('height', '200px'); // location1.append('svg:image')\n      //   .attr('xlink:href', '//a.amap.com/jsapi_demos/static/demo-center/icons/poi-marker-red.png')\n      //   .attr('width', '200px')\n      //   .attr('height', '200px')\n\n      var location2 = svg.append('g').attr('transform', endIcon);\n      location2.append('svg:image').attr('xlink:href', _end.default).attr('width', '200px').attr('height', '200px');\n    },\n    // 显示符合条件的一条或者多条轨迹\n    showTrack: function showTrack(starttime, endtime) {\n      var _this5 = this;\n\n      // 先判断这是哪个地图,找到这个地图中的所有轨迹\n      // imgs[selectedIndex].maplabel\n      // tracks = []\n      // 判断这些轨迹是否在时间段内，如果在则绘制出来轨迹；否则就不再绘制\n      // 可使用的思路是 判断轨迹的起点和终点的时间是否在时间段中，如果在则绘制，否则就跳过\n      if (starttime === null || endtime === null || starttime === '' || endtime === '') {\n        return;\n      }\n\n      var data;\n      var that = this;\n      console.log(this.userData);\n      this.userData.forEach(function (item) {\n        console.log(\"接收用户成功\");\n        var para = {\n          userID: (0, _parseInt2.default)(item.userID),\n          mapID: (0, _parseInt2.default)(_this5.mapid) // startDate : this.starttimeValue,\n          // endDate : this.endtimeValue\n\n        };\n\n        _similarity.default.getIndoorTrajectories(para).then(function (response) {\n          console.log(\"接收成功\");\n          data = response.data.content.list; // console.log(\"获取用户的轨迹\")\n          // data = data[para.trajectoryID]\n\n          data.forEach(function (item) {\n            // console.log(item)\n            // item = item.trajectoryID\n            var tid = {\n              trajectoryId: (0, _parseInt2.default)(item.trajectoryId) // console.log(tid)\n              // this.showIndoorTrajectoryDetail(item.trajectoryID)\n\n            };\n\n            _similarity.default.getIndoorTrajectoryDetail(tid).then(function (response) {\n              item = response.data.content.list; // item = data[tid.trajectoryID]\n\n              console.log(\"获得该轨迹的详细信息\");\n              var start = item[0]['timeStamp']; // console.log(start)\n\n              var end = item[item.length - 1]['timeStamp'];\n              var getTime = new Date(start);\n              start = getTime.toLocaleString();\n              getTime = new Date(end);\n              end = getTime.toLocaleString();\n\n              if (start >= new Date(starttime).toLocaleString() && end <= new Date(endtime).toLocaleString()) {\n                console.log(\"绘制轨迹\");\n                that.trackDatas = item;\n                that.showTrackdots(item, \"black\");\n              }\n            });\n          });\n        });\n      });\n    },\n    // 用不同的颜色显示室内用户的轨迹\n    showUserTrack: function showUserTrack(flag) {\n      var para;\n      var linecolor;\n      var that = this;\n\n      if (flag === 1) {\n        para = {\n          userID: (0, _parseInt2.default)(this.userAid),\n          mapID: (0, _parseInt2.default)(this.mapid) // startDate : \"2008-09-03\",\n          // endDate : \"2008-09-03\"\n\n        };\n        linecolor = 'blue';\n      } else {\n        para = {\n          userID: (0, _parseInt2.default)(this.userBid),\n          mapID: (0, _parseInt2.default)(this.mapid) // startDate : \"2008-09-03\",\n          // endDate : \"2008-09-03\"\n\n        };\n        linecolor = 'red';\n      } // 对轨迹进行绘制\n\n\n      _similarity.default.getIndoorTrajectories(para).then(function (response) {\n        var data = response.data.content.list;\n        data.forEach(function (item) {\n          var tid = {\n            trajectoryId: (0, _parseInt2.default)(item.trajectoryId)\n          };\n\n          _similarity.default.getIndoorTrajectoryDetail(tid).then(function (response) {\n            item = response.data.content.list;\n            that.showTrackdots(item, linecolor);\n          });\n        });\n      });\n    },\n    ////////////////////室外////////////////////////////////\n    // 百度地图 室外地图的创建引入\n    mymap: function mymap() {\n      var map = new BMap.Map(\"myMap\"); //在百度地图容器中创建一个地图\n\n      var point = new BMap.Point(116.395645, 39.937953); //定义一个中心点坐标\n\n      map.centerAndZoom(point, 12); //设定地图的中心点和坐标并将地图显示在地图容器中\n\n      window.map = map; //将map变量存储在全局\n    },\n    // 设置一些地图默认事件\n    setMapEvent: function setMapEvent() {\n      map.enableDragging(); //启用地图拖拽事件，默认启用(可不写)\n\n      map.enableScrollWheelZoom(); //启用地图滚轮放大缩小\n\n      map.enableDoubleClickZoom(); //启用鼠标双击放大，默认启用(可不写)\n\n      map.enableKeyboard(); //启用键盘上下左右键移动地图\n    },\n    // 添加控件\n    addMapControl: function addMapControl() {\n      //向地图中添加缩放控件\n      var ctrl_nav = new BMap.NavigationControl({\n        anchor: BMAP_ANCHOR_TOP_LEFT,\n        type: BMAP_NAVIGATION_CONTROL_LARGE\n      });\n      map.addControl(ctrl_nav); //向地图中添加缩略图控件\n\n      var ctrl_ove = new BMap.OverviewMapControl({\n        anchor: BMAP_ANCHOR_BOTTOM_RIGHT,\n        isOpen: 1\n      });\n      map.addControl(ctrl_ove); //向地图中添加比例尺控件\n\n      var ctrl_sca = new BMap.ScaleControl({\n        anchor: BMAP_ANCHOR_BOTTOM_LEFT\n      });\n      map.addControl(ctrl_sca);\n    },\n    // 显示室外用户列表\n    showOutdoorUsers: function showOutdoorUsers() {\n      var data;\n      var that = this;\n\n      _similarity.default.getOutdoorUsers().then(function (response) {\n        data = response.data.content.list;\n        console.log(\"获得室外用户列表的信息\");\n        console.log(data);\n\n        if (data) {\n          var datalist = [];\n          data.forEach(function (item) {\n            var lists = {\n              'userID': '',\n              'userName': ''\n            };\n\n            if (item) {\n              lists['userID'] = item['userId'];\n              lists['userName'] = item['userName'];\n              datalist.push(lists);\n            }\n          });\n          that.userData = datalist;\n        }\n      });\n    },\n    // 显示室外轨迹相似度\n    showOutdoorSimilarity: function showOutdoorSimilarity() {\n      var data;\n      var that = this;\n      var para = {\n        userAID: 0,\n        userBID: 1,\n        startDate: \"2008-07-04\",\n        endDate: \"2009-09-04\"\n      };\n      console.log(para);\n\n      _similarity.default.getOutdoorSimilarity(para).then(function (response) {\n        // 获取室内用户相似度\n        // console.log(response.data.content)\n        data = response.data.content.trajectory;\n        console.log(\"获得相似度的信息\"); // console.log(data)\n\n        var dataitem = [];\n        data.forEach(function (item) {\n          dataitem.push({\n            trajectoryAid: item['trajectoryAID'],\n            trajectoryBid: item['trajectoryBID'],\n            similarity: item['similarity']\n          });\n        });\n        that.similarityList = dataitem;\n      });\n    },\n    // 当点击相似度那一行的时候，要在图中显示出轨迹\n    showoutTrackSame: function showoutTrackSame(row) {\n      var data;\n      var that = this;\n      var link;\n      this.trajectoryId = row.trajectoryAid;\n      setTimeout(function () {\n        that.showouttrack(\"red\");\n      }, 1000);\n\n      var loadingInstance = _elementUi.Loading.service({\n        lock: true,\n        text: '拼命绘制轨迹地图中...',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n\n      setTimeout(function () {\n        loadingInstance.close();\n      }, 1000);\n      this.trajectoryId = row.trajectoryBid; // this.trajectoryId = 175\n\n      setTimeout(function () {\n        that.showouttrack(\"red\");\n      }, 1000);\n\n      var loadingInstance = _elementUi.Loading.service({\n        lock: true,\n        text: '拼命绘制轨迹地图中...',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n\n      setTimeout(function () {\n        loadingInstance.close();\n      }, 1000); // let para = {\n      //   \"trajectoryID\": parseInt(row.trajectoryAid)\n      // }\n      // let parab = {\n      //   \"trajectoryID\": parseInt(row.trajectoryBid)\n      // }\n      // api.getOutdoorTrajectoryDetail(para).then(response => {\n      //     console.log(\"接收成功\")\n      //     data = response.data.content.list\n      //     this.trajectoryId = data.trajectoryId \n      //     that.showouttrack(\"blue\");\n      //     // that.showoutTrackdots(item,linecolor)\n      // })\n      // api.getOutdoorTrajectoryDetail(parab).then(response => {\n      //     console.log(\"接收成功\")\n      //     data = response.data.content.list\n      //     that.showouttrack(\"red\");\n      //     // that.showoutTrackdots(item,linecolor)\n      // })\n    },\n    // 用不同的颜色显示室外用户的轨迹\n    showUseroutTrack: function showUseroutTrack(flag) {\n      var para;\n      var linecolor;\n      var that = this;\n\n      if (flag === 1) {\n        para = {\n          userID: (0, _parseInt2.default)(this.userAid) // startDate : this.starttimeValue,\n          // endDate : this.endtimeValue\n\n        };\n        linecolor = 'blue';\n      } else {\n        para = {\n          userID: (0, _parseInt2.default)(this.userBid) // startDate : this.starttimeValue,\n          // endDate : this.endtimeValue\n\n        };\n        linecolor = 'red';\n      } // 对轨迹进行绘制\n\n\n      _similarity.default.getOutdoorTrajectories(para).then(function (response) {\n        var data = response.data.content.list;\n        data.forEach(function (item) {\n          var tid = {\n            trajectoryId: (0, _parseInt2.default)(item.trajectoryId)\n          };\n\n          _similarity.default.getOutdoorTrajectoryDetail(tid).then(function (response) {\n            item = response.data.content.list;\n            that.showouttrack(linecolor); // that.showoutTrackdots(item,linecolor)\n          });\n        });\n      });\n    },\n    // 显示室外轨迹\n    showouttrack: function showouttrack(linecolor) {\n      this.mymap(); //创建地图\n\n      this.setMapEvent(); //设置地图事件\n\n      this.addMapControl(); //向地图添加控件\n\n      this.addPolyline(linecolor);\n    },\n    addPolyline: function addPolyline(linecolor) {\n      for (var i = 0; i < this.plPoints.length; i++) {\n        var json = this.plPoints[i];\n        var points = [];\n\n        for (var j = 0; j < json.points.length; j++) {\n          var p1 = json.points[j].split(\"|\")[0];\n          var p2 = json.points[j].split(\"|\")[1];\n          var point = new BMap.Point(p1, p2);\n          map.centerAndZoom(point, 16);\n          points.push(new BMap.Point(p1, p2));\n        }\n\n        var line = new BMap.Polyline(points, {\n          strokeStyle: json.style,\n          strokeWeight: json.weight,\n          strokeColor: linecolor,\n          strokeOpacity: json.opacity\n        });\n        map.addOverlay(line);\n      }\n    },\n    showAlltrajectory: function showAlltrajectory() {\n      var para = {\n        \"userId\": 1,\n        \"startDate\": \"2018-3-5\",\n        \"endDate\": \"2018-3-6\"\n      };\n      var that = this;\n\n      _similarity.default.getOutdoorTrajectories(para).then(function (response) {\n        console.log(\"接收成功\"); // console.log(response.data.content.list[1])\n\n        var data = response.data.content.list;\n        data.forEach(function (item) {\n          // console.log(item)\n          that.trajectoryId = item.trajectoryId;\n        });\n      });\n    },\n    hello: function hello() {\n      var _this6 = this;\n\n      console.log(this.trajectoryId); //获取轨迹信息\n\n      var para = {\n        \"trajectoryID\": this.trajectoryId // console.log(para)\n\n      };\n      console.log(\"开始接收\");\n\n      _similarity.default.getOutdoorTrajectoryDetail(para).then(function (response) {\n        console.log(\"接收成功\"); // console.log(response.data.content.list[1])\n\n        var number1 = 0;\n        _this6.trackoutData = response.data.content.list; // this.trackoutDatas.append(this.trackoutData)\n\n        var i = 0;\n\n        for (i in _this6.trackoutData) {\n          _this6.x_2 = _this6.trackoutData[i][\"latitude\"];\n          _this6.y_2 = _this6.trackoutData[i][\"longitude\"];\n          _this6.solepoint = _this6.y_2 + \"|\" + _this6.x_2, _this6.points_list_2.push(_this6.solepoint);\n        }\n\n        for (i in _this6.trackoutData) {\n          _this6.x_2 = _this6.trackoutData[i][\"latitude\"];\n          _this6.y_2 = _this6.trackoutData[i][\"longitude\"];\n          _this6.solepoint = _this6.y_2 + \"|\" + _this6.x_2, _this6.points_list_3.push({\n            title: null,\n            content: null,\n            point: _this6.solepoint,\n            isOpen: 0,\n            icon: {\n              w: 100,\n              h: 21,\n              l: 0,\n              t: 0,\n              x: 6,\n              lb: 5\n            }\n          });\n        }\n\n        _this6.markerArr = _this6.points_list_3;\n        _this6.plPoints = [{\n          style: \"solid\",\n          weight: 4,\n          color: \"#f00\",\n          opacity: 0.6,\n          points: _this6.points_list_2\n        }];\n        _this6.x_1 = _this6.trackoutData[0][\"latitude\"];\n        _this6.y_1 = _this6.trackoutData[0][\"longitude\"];\n        _this6.nowpoints[0] = {\n          title: null,\n          content: null,\n          point: _this6.y_1 + \"|\" + _this6.x_1,\n          isOpen: 0,\n          icon: {\n            w: 100,\n            h: 21,\n            l: 0,\n            t: 0,\n            x: 6,\n            lb: 5\n          }\n        };\n      }, function (err) {\n        // console.log(err)\n        console.log(\"接收失败\");\n      });\n    }\n  }\n};\nexports.default = _default;",null]}