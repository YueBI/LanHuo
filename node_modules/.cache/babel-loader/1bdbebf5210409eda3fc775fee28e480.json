{"remainingRequest":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo-biyue/src/views/dashboard/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo-biyue/src/views/dashboard/index.vue","mtime":1557176484000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _parseInt2 = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/parse-int\"));\n\nvar _now = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/date/now\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar d3 = _interopRequireWildcard(require(\"d3\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _crypto = require(\"crypto\");\n\nvar _similarity = _interopRequireDefault(require(\"@/api/similarity.js\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  data: function data() {\n    return {\n      starttimeValue: null,\n      // 开始时间\n      endtimeValue: null,\n      // 结束时间\n      startTime: null,\n      // 开始时间临时值\n      endTime: null,\n      // 结束时间临时值\n      maps: [],\n      // 存储地图列表\n      // maps: this.showIndoorMap(), // 存储地图列表\n      selectedIndex: '',\n      // 下拉框选择地图时的索引值\n      mapid: '',\n      userAid: '',\n      userBid: '',\n      userData: [],\n      // 用户列表\n      similarityList: [],\n      // 相似度列表\n      selectVal: '',\n      // 用户输入框1 用户值\n      selectVal2: '',\n      // 用户输入框2 用户值\n      isShow: false,\n      // 是否显示用户列表以及确定按钮\n      flag: 0,\n      // 确定是哪个用户输入框\n      currentRow: null,\n      // 用户列表选中的行\n      isShowSimi: false,\n      // 是否显示相似度列表\n      indoorTrackData: '',\n      // 存放轨迹json文件\n      outdoorTrackData: '',\n      // 存放轨迹json文件\n      num: 0,\n      // 回放时的轨迹点的索引\n      timer: null,\n      // 定时器名称\n      track: null\n    };\n  },\n  computed: {\n    // 将开始时间和结束时间组成一个总的，之后就可以两者同时监测\n    timeValue: function timeValue() {\n      var starttimeValue = this.starttimeValue,\n          endtimeValue = this.endtimeValue;\n      return {\n        starttimeValue: starttimeValue,\n        endtimeValue: endtimeValue\n      };\n    }\n  },\n  watch: {\n    // 监测开始时间和结束时间，确保开始时间不能大于结束时间，以及两者都不能大于当前系统的时间，否则就会出现错误提示\n    timeValue: {\n      handler: function handler(time) {\n        this.startTime = time.starttimeValue;\n        this.endTime = time.endtimeValue;\n\n        _elementUi.Message.closeAll();\n\n        if (this.startTime === null || this.endTime === null || this.startTime === '' || this.endTime === '') {\n          this.errorMessage('开始时间或者结束时间都不能为空!'); // 当起止时间有一个清空的时候，那么右侧的用户列表、相似度列表以及用户都要清空\n\n          this.selectVal = '';\n          this.selectVal2 = '';\n          this.isShow = false;\n          this.isShowSimi = false; // 并且显示出的筛选过的轨迹也要清空\n\n          var svg = d3.select('.app-main').select('svg');\n          svg.selectAll('circle').remove();\n          svg.selectAll('path').remove(); // svg.selectAll('g').remove()\n          // svg.selectAll('.persentInf').remove();\n          // svg.select('.inforContent').remove();\n        } else if (new Date(this.startTime) > (0, _now.default)() || new Date(this.endTime) > (0, _now.default)()) {\n          // this.$refs.starttimeInput.$refs.reference.$refs.input.focus()\n          this.errorMessage('开始时间或结束时间都不能大于当前的时间！');\n        } else if (this.startTime > this.endTime) {\n          // this.$refs.starttimeInput.$refs.reference.$refs.input.focus()\n          this.errorMessage('开始时间不能大于结束时间');\n        } else {\n          this.showTrack(this.starttimeValue, this.endtimeValue);\n        }\n      },\n      deep: true // 监测地图选择框的变化\n      // selectedIndex: {\n      //   handler: function() {\n      //     console.log(this.selectedIndex)\n      //     // 每当地图选择变换的时候，如果界面中存在轨迹，需要清空，并且重新绘制选择的地图的轨迹信息\n      //     // 先将轨迹信息清空\n      //     // var svg = d3.select('svg')\n      //     // svg.selectAll('circle').remove()\n      //     // svg.selectAll('path').remove()\n      //     // svg.selectAll('g').remove()\n      //     // svg.selectAll('img').remove()\n      //     // 重新绘制\n      //     // this.showTrack(this.starttimeValue,this.endtimeValue)\n      //   }\n      // }\n\n    }\n  },\n  methods: {\n    // 获取室内地图列表\n    showIndoorMap: function showIndoorMap() {\n      var _this = this;\n\n      _similarity.default.queryIndoorMap().then(function (response) {\n        _this.maps = response.data.content.list;\n        console.log(\"获得地图列表的信息\");\n      });\n    },\n    showIndoorUsers: function showIndoorUsers(mapID) {\n      var data;\n      var that = this;\n\n      if (mapID.length > 0) {\n        var para = {\n          mapID: (0, _parseInt2.default)(mapID)\n        };\n        console.log(\"kaishi\");\n\n        _similarity.default.getIndoorUsers(para).then(function (response) {\n          data = response.data.content.list;\n          console.log(\"获得用户列表的信息\");\n\n          if (data) {\n            var datalist = [];\n            data.forEach(function (item) {\n              var lists = {\n                'userID': '',\n                'userName': ''\n              };\n\n              if (item['mapID'] === para.mapID) {\n                lists['userID'] = item['userID'];\n                lists['userName'] = item['userName'];\n                datalist.push(lists);\n              }\n            });\n            that.userData = datalist;\n          }\n        });\n      }\n    },\n    showIndoorTrajectoryDetail: function showIndoorTrajectoryDetail(trajectoryID) {\n      var data;\n      var that = this;\n      var link;\n      var para = {\n        trajectoryID: (0, _parseInt2.default)(trajectoryID)\n      };\n\n      _similarity.default.getIndoorTrajectoryDetail(para).then(function (response) {\n        data = response.data.content.list;\n        data = data[para.trajectoryID];\n        console.log(\"获得该轨迹的详细信息\");\n        return data; // that.track = data\n        // that.$forceUpdate()\n      }); // let para = {\n      //   userID : parseInt(this.userAid),\n      //   mapID : parseInt(this.mapid)\n      //   // startDate : this.starttimeValue,\n      //   // endDate : this.endtimeValue\n      // }\n      // api.getIndoorTrajectories(para).then(response => {\n      //   data = response.data.content.list\n      //   console.log(\"获得轨迹的信息\")\n      //   data.forEach(function(itemi) {\n      //     // console.log(itemi)\n      //     if(itemi.trajectoryID === para.trajectoryID) {\n      //       link = itemi.trajectorySrc\n      //       // console.log(link)\n      //     } \n      //   })\n      //   if(link) {\n      //       // 读取该轨迹的详细信息\n      //       api.getIndoorTrajectoryDetail(para).then(response => {\n      //         data = response.data.content.list\n      //         console.log(\"获得该轨迹的详细信息\")\n      //         that.track = data\n      //         that.$forceUpdate()\n      //       })\n      //   }\n      // })\n      // axios.post('/dashboard/getsimilarityjectorydetail')\n      //   .then(function(item) {\n      //     console.log('进入')\n      //     console.log(item)\n      //     console.log(trajectoryID)\n      //     data = item.data[trajectoryID]\n      //     // that.track.splice(data)\n      //     // that.$forceUpdate()\n      //     // console.log('详细轨迹')\n      //     // console.log(that.track)\n      //     return data\n      //   })\n\n    },\n    // 显示轨迹相似度\n    showIndoorSimilarity: function showIndoorSimilarity() {\n      var data;\n      var that = this;\n      var para = {\n        userAID: (0, _parseInt2.default)(this.userAid),\n        userBID: (0, _parseInt2.default)(this.userBid),\n        mapID: (0, _parseInt2.default)(this.mapid) // startDate : this.starttimeValue,\n        // endDate : this.endtimeValue\n\n      };\n\n      _similarity.default.getIndoorSimilarity(para).then(function (response) {\n        data = response.data.content.list;\n        console.log(\"获得室内相似度的信息\");\n        var dataitem = [];\n        data.forEach(function (item) {\n          dataitem.push({\n            trajectoryAid: item['trajectoryAID'],\n            trajectoryBid: item['trajectoryBID'],\n            similarity: item['similarity']\n          });\n        });\n        that.similarityList = dataitem;\n      }); // axios.post('/dashboard/getindoorsimilarity')\n      //   .then(function(item) {\n      //     // console.log(item.data)\n      //     data = item.data.trajectory\n      //     // console.log(data)\n      //     var dataitem = []\n      //     data.forEach(function(item) {\n      //       // console.log(item)\n      //       // 记录两条轨迹的id和相似度，然后可以显示在列表中\n      //       dataitem.push({\n      //         trajectoryAid: item['trajectoryAID'],\n      //         trajectoryBid: item['trajectoryBID'],\n      //         similarity: item['similarity']\n      //       })\n      //     })\n      //     that.similarityList = dataitem\n      //   })\n\n    },\n    // 当点击相似度那一行的时候，要在图中显示出轨迹\n    showTrackSame: function showTrackSame(row) {\n      // 如果界面中有图像，则要先清除\n      var svg = d3.select('.app-main').select('svg');\n      svg.selectAll('circle').remove();\n      svg.selectAll('path').remove();\n      svg.selectAll('g').remove();\n      svg.selectAll('img').remove(); // 获取两个轨迹的详细内容\n      // console.log('点击行：'+row.trajectoryAid)\n      // console.log(this.track)\n      // axios.all(this.showIndoorTrajectoryDetail(row.trajectoryAid),this.showIndoorTrajectoryDetail(row.trajectoryBid)).then(axios.spread(function (acct, perms){\n      //   console.log(acct)\n      //   console.log(perms)\n      // }))\n\n      var trackA = this.showIndoorTrajectoryDetail(row.trajectoryAid); // 根据选中行的轨迹的id获取该条轨迹的详细信息\n      // var trackB = this.track\n\n      var trackB = this.showIndoorTrajectoryDetail(row.trajectoryBid); // 根据选中行的轨迹的id获取该条轨迹的详细信息\n      //   this.$forceUpdate()\n      //   console.log(\"给B赋值\")\n      // var trackB = this.track\n      // // })\n      // 将两个轨迹绘制在图上\n\n      console.log(trackA, trackB);\n\n      if (trackA) {\n        this.showTrackdots(trackA);\n      }\n\n      if (trackB) {\n        this.showTrackdots(trackB);\n      }\n    },\n    // 当用户输入框获得焦点以后，则显示用户列表(当没有选择地图和时间段的时候会报错)\n    showList: function showList(flag) {\n      if (this.selectedIndex !== '' && this.starttimeValue !== '' && this.endtimeValue !== '' && this.starttimeValue !== null && this.endtimeValue !== null) {\n        _elementUi.Message.closeAll();\n\n        this.showIndoorUsers(this.mapid); // this.userData = this.showIndoorUsers(this.mapid)\n        // console.log(this.userData)\n\n        this.isShow = true;\n        this.isShowSimi = false;\n        this.flag = flag;\n      } else {\n        this.errorMessage('请先选择地图和时间段');\n      }\n    },\n    // 当点击确定按钮之后，需要隐藏用户列表\n    hideList: function hideList() {\n      this.isShow = false;\n      this.currentRow = null;\n\n      if (this.selectVal !== '' && this.selectVal2 !== '') {\n        // 如果两个用户都有值，则需要显示相似度列表\n        this.isShowSimi = true;\n        this.showIndoorSimilarity();\n      }\n\n      this.setCurrent();\n    },\n    // 选中列表中的值以后，更新输入框的值\n    handleRowClick: function handleRowClick(row) {\n      if (this.flag === 1) {\n        this.selectVal = row.userName; // 当检测到是第一个用户选择框的时候，则将第一个选择框的值进行更新\n\n        this.userAid = row.userID; // 更新用户的id\n      } else {\n        this.selectVal2 = row.userName; // 当检测到是第二个用户选择框的时候，则将第二个选择框的值进行更新\n\n        this.userBid = row.userID; // 更新用户的id\n      }\n\n      this.currentRow = row; // 将当前行存储下来\n    },\n    // 设置当前点击的行，传进去空的话就是取消选中状态\n    setCurrent: function setCurrent(row) {\n      this.$refs.singleTable.setCurrentRow(row);\n    },\n    // 错误信息方法\n    errorMessage: function errorMessage(mes) {\n      (0, _elementUi.Message)({\n        showClose: false,\n        message: mes,\n        type: 'error',\n        duration: 0\n      });\n    },\n    // 显示地图图片\n    map: function map(selectedIndex) {\n      // 获取图片位置以及地图的ID\n      this.mapid = this.maps[selectedIndex].mapID;\n      var mapImg = this.maps[selectedIndex].mapSrc; // 添加地图\n      // this.addMap(mapImg, selectedIndex, viewBoxvalue)\n\n      this.addMap(mapImg, selectedIndex);\n      this.$forceUpdate();\n    },\n    addMap: function addMap(mapImg, selectedIndex) {\n      // 切换，如果那个位置有图片，需要先移除那个地方的图片再添加\n      if (d3.select('.app-main').selectAll('image').empty() === false) {\n        d3.selectAll('image').remove();\n      } // console.log(mapImg, selectedIndex)\n      //  获得svg标签\n      // var svg = d3.select('body').select('div').select('selection').select('svg')\n\n\n      var svg = d3.select('.app-main').select('svg'); // console.log(svg)\n      // 设置svg中图片的自动缩放\n      // svg.attr('viewBox', '0 0 4167 2190');\n      // 添加以及设置svg中图片的属性\n\n      var imgs = svg.selectAll('images' + selectedIndex);\n      imgs.data([0]).enter().append('svg:image').attr('xlink:href', mapImg); // this.$forceUpdate()\n      // console.log(\"绘制完成\")\n      // 添加位置标注图标，可用于用户位置的标注，目前还用不到\n\n      var location1 = svg.append('g').attr('transform', 'translate(100,100)');\n      location1.append('svg:image').attr('xlink:href', '../static/icon.png');\n      var location2 = svg.append('g').attr('transform', 'translate(101,101)');\n      location2.append('svg:image').attr('xlink:href', '../static/icon.png');\n    },\n    // 显示室内单条轨迹\n    showTrackdots: function showTrackdots(indoorItem) {\n      // if (starttime == null || endtime == null || starttime == '' || endtime == ''){\n      //   return;\n      // }\n      // console.log(indoorItem)\n      // 添加轨迹\n      var svg = d3.select('.app-main').select('svg'); // var svg = d3.select('svg')\n\n      var start = true;\n      var path = ''; // var indoorData = this.indoorTrackData[user]\n      // console.log(\"indoorItem\")\n      // foreach读取json中的每个坐标的位置，并连接坐标形成路径，用path画出\n\n      indoorItem.forEach(function (item) {\n        var x = item.x / 1019 * 4167; // 获取x轴坐标\n\n        var y = item.y / 1219 * 2190; // 获取y轴坐标\n        // var x = (item.x / 1019) * 1140 // 获取x轴坐标\n        // var y = (item.y / 1219) * 600 // 获取y轴坐标\n        // 判断轨迹点的时间是否在所选时间段中，如果在则绘制显示出来\n        // if (time >= new Date(starttime).toLocaleString() && time <= new Date(endtime).toLocaleString()) {\n        // 圆是最初想用来表示轨迹，发现坐标部分间隔太远，改用path\n\n        svg.append('circle') // 紫色圆圈绘制，位置半径\n        .attr('cx', x).attr('cy', y).attr('r', 5).style('fill', 'purple'); // svg.append('circle') // 紫色圆圈绘制，位置半径\n        //   .attr('cx', item.x)\n        //   .attr('cy', item.y)\n        //   .attr('r', 5)\n        //   .style('fill', 'purple')\n\n        if (start) {\n          path += 'M' + x + ' ' + y + ' ';\n          start = false;\n        } else {\n          path += 'L' + x + ' ' + y + ' ';\n        }\n      }); // 添加路径\n\n      svg.append('path').attr('fill', 'transparent').attr('stroke', '#000000').attr('stroke-width', '6').attr('stroke-linecap', 'round').attr('v-bind:id', 'moveTrack').attr('d', path); // 添加起点和终点的标注\n\n      var startdot = indoorItem[0];\n      var enddot = indoorItem[indoorItem.length - 1]; // var startIcon = 'translate(' + ((startdot.x / 1019) * 1140 - 10) + ',' + ((startdot.y / 1219) * 600 - 20) + ')'\n      // var endIcon = 'translate(' + ((enddot.x / 1019) * 1140 - 10) + ',' + ((enddot.y / 1219) * 600 - 20) + ')'\n\n      var startIcon = 'translate(' + (startdot.x / 1019 * 4167 - 80) + ',' + (startdot.y / 1219 * 2190 - 200) + ')';\n      var endIcon = 'translate(' + (enddot.x / 1019 * 4167 - 80) + ',' + (enddot.y / 1219 * 2190 - 200) + ')';\n      var location1 = svg.append('g').attr('transform', startIcon);\n      location1.append('svg:image').attr('xlink:href', 'https://img01.sogoucdn.com/net/a/04/link?appid=100520145&url=http%3A%2F%2Fimg03.sogoucdn.com%2Fapp%2Fa%2F100520146%2F8991ef4b9a4ffbc2dcc19185280061b4').attr('width', '20px').attr('height', '20px');\n      var location2 = svg.append('g').attr('transform', endIcon);\n      location2.append('svg:image').attr('xlink:href', 'https://img.mp.itc.cn/upload/20161226/56af5926ca36493c9a473de688492a77_th.jpg').attr('width', '20px').attr('height', '20px');\n    },\n    // 显示符合条件的一条或者多条轨迹\n    showTrack: function showTrack(starttime, endtime) {\n      // 先判断这是哪个地图,找到这个地图中的所有轨迹\n      // imgs[selectedIndex].maplabel\n      // tracks = []\n      // 判断这些轨迹是否在时间段内，如果在则绘制出来轨迹；否则就不再绘制\n      // 可使用的思路是 判断轨迹的起点和终点的时间是否在时间段中，如果在则绘制，否则就跳过\n      if (starttime === null || endtime === null || starttime === '' || endtime === '') {\n        return;\n      }\n\n      var data;\n      var that = this;\n      var para = {\n        userID: (0, _parseInt2.default)(this.userAid),\n        mapID: (0, _parseInt2.default)(this.mapid) // startDate : this.starttimeValue,\n        // endDate : this.endtimeValue\n\n      };\n      var para2 = {\n        userID: (0, _parseInt2.default)(this.userBid),\n        mapID: (0, _parseInt2.default)(this.mapid) // startDate : this.starttimeValue,\n        // endDate : this.endtimeValue\n\n      };\n\n      _similarity.default.getIndoorTrajectories(para).then(function (response) {\n        data = response.data.content.list; // let tid = {\n        //   trajectoryID : data.\n        // }\n\n        console.log(\"获取用户1的轨迹\"); // data = data[para.trajectoryID]\n\n        data.forEach(function (item) {\n          // console.log(item)\n          item = item.trajectorySrc;\n          console.log(\"获取用户1单个的轨迹\");\n          var start = item[0]['timeStamp'];\n          var end = item[item.length - 1]['timeStamp'];\n          var getTime = new Date(start);\n          start = getTime.toLocaleString();\n          getTime = new Date(end);\n          end = getTime.toLocaleString();\n\n          if (start >= new Date(starttime).toLocaleString() && end <= new Date(endtime).toLocaleString()) {\n            that.showTrackdots(item);\n          }\n        });\n      });\n\n      _similarity.default.getIndoorTrajectories(para2).then(function (response) {\n        data = response.data.content.list;\n        console.log(\"获取用户2的轨迹\"); // data = data[para2.trajectoryID]\n\n        data.forEach(function (item) {\n          item = item.trajectorySrc;\n          console.log(\"获取用户2单个的轨迹\");\n          var start = item[0]['timeStamp'];\n          var end = item[item.length - 1]['timeStamp'];\n          var getTime = new Date(start);\n          start = getTime.toLocaleString();\n          getTime = new Date(end);\n          end = getTime.toLocaleString();\n\n          if (start >= new Date(starttime).toLocaleString() && end <= new Date(endtime).toLocaleString()) {\n            that.showTrackdots(item);\n          }\n        });\n      }); // axios.post('/dashboard/getindoortrajectorydetail')\n      //   .then(function(item) {\n      //     if (item) {\n      //       var indoorData1 = item.data.list\n      //       indoorData1.forEach(function(item) {\n      //         // console.log(item)\n      //         var start = item[0]['timeStamp']\n      //         var end = item[item.length - 1]['timeStamp']\n      //         var getTime = new Date(start)\n      //         start = getTime.toLocaleString()\n      //         getTime = new Date(end)\n      //         end = getTime.toLocaleString()\n      //         if (start >= new Date(starttime).toLocaleString() && end <= new Date(endtime).toLocaleString()) {\n      //           that.showTrackdots(item)\n      //         }\n      //       })\n      //     }\n      //   })\n      // getIndoorTrajectories(this.userAid, this.mapid, starttime, endtime).then(response => {\n      //   this.indoorTrackData = response.data.list\n      // })\n      // var indoorData1 = this.indoorTrackData\n      // axios.post('/dashboard/getindoortrajectorydetail')\n      //   .then(function(item) {\n      //     var indoorData2 = item.data.list\n      //     indoorData2.forEach(function(item) {\n      //       var start = item[0]['timeStamp']\n      //       var end = item[item.length - 1]['timeStamp']\n      //       var getTime = new Date(start)\n      //       start = getTime.toLocaleString()\n      //       getTime = new Date(end)\n      //       end = getTime.toLocaleString()\n      //       if (start >= new Date(starttime).toLocaleString() && end <= new Date(endtime).toLocaleString()) {\n      //         that.showTrackdots(item)\n      //       }\n      //     })\n      //   })\n      // getIndoorTrajectories(this.userBid, this.mapid, starttime, endtime).then(response => {\n      //   this.indoorTrackData = response.data.list\n      // })\n\n    }\n  }\n};\nexports.default = _default;",null]}