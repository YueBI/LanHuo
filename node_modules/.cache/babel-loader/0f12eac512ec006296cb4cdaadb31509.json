{"remainingRequest":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/subway/InfoCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/subway/InfoCard.vue","mtime":1562858700000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.string.repeat\");\n\nvar _from = _interopRequireDefault(require(\"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@babel/runtime-corejs2/core-js/array/from\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _echarts = _interopRequireDefault(require(\"echarts\"));\n\nvar _timers = require(\"timers\");\n\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: \"InfoCard\",\n  props: {\n    infoCard: Object\n  },\n  data: function data() {\n    return {};\n  },\n  methods: {\n    update_option: function update_option(chart, app) {\n      // console.log(this.infoCard);\n      var axisData = new Date().toLocaleTimeString().replace(/^\\D*/, \"\");\n      var data0 = this.infoCard.option.series[0].data;\n      var data1 = this.infoCard.option.series[1].data;\n      data0.shift();\n      var new_input = Math.round(Math.random() * 1000);\n      data0.push(new_input);\n      data1.shift();\n      data1.push((Math.random() * 10 + 5).toFixed(1) - 0);\n      this.infoCard.option.xAxis[0].data.shift();\n      this.infoCard.option.xAxis[0].data.push(axisData);\n      this.infoCard.option.xAxis[1].data.shift();\n      this.infoCard.option.xAxis[1].data.push(app.count++);\n      chart.setOption(this.infoCard.option);\n      this.infoCard.number = String(new_input / 10) + \"%\";\n    },\n    update_user_option: function update_user_option(chart) {\n      this.infoCard.option.series[0].data[0].value = (Math.random() * 100).toFixed(2) - 0;\n      chart.setOption(this.infoCard.option, true);\n    },\n    random: function random(maxData) {\n      return +(Math.random() * (maxData - 10)).toFixed(1);\n    },\n    update_queued_option: function update_queued_option(chart, maxData) {\n      var dynamicData = [this.random(maxData), this.random(maxData), this.random(maxData), this.random(maxData)];\n      this.infoCard.option.series[0].data = dynamicData.slice();\n      this.infoCard.option.series[1].data = dynamicData.slice();\n      chart.setOption(this.infoCard.option);\n    },\n    update_average_density_number: function update_average_density_number() {\n      this.infoCard.number = String(Math.round(Math.random() * 1000)) + \"人/时\";\n    }\n  },\n  mounted: function mounted() {\n    var app = {};\n    app.count = 11;\n    var that = this;\n    window.addEventListener(\"message\", function (e) {\n      if (e.source === window.frames[0] || !isNaN(e.data)) {\n        // console.log(\"testsssss\");\n        console.log(e.data);\n        var name = that.infoCard.name;\n\n        switch (name) {\n          case \"averageFlow\":\n            if (typeof e.data == 'string') {\n              that.infoCard.title = e.data + that.infoCard.title.slice(-6);\n            }\n\n            that.update_average_density_number();\n            break;\n\n          case \"CurrentDensity\":\n            if (typeof e.data == 'string') {\n              that.infoCard.title = e.data + that.infoCard.title.slice(-5);\n            }\n\n            break;\n\n          case \"passengerFlow\":\n            if (typeof e.data == 'string') {\n              that.infoCard.title = e.data + that.infoCard.title.slice(-5);\n            }\n\n            var overall_number = Math.round(Math.random() * 10000);\n            that.infoCard.number = overall_number;\n            that.infoCard.option.series[0].data = (0, _from.default)({\n              length: 7\n            }, function () {\n              return Math.floor(Math.random() * 1000 + 500);\n            });\n            chart.setOption(that.infoCard.option, true);\n            break;\n\n          case \"WaitingComfortDegree\":\n            var number = Math.round(Math.random() * 100).toFixed(0);\n            that.infoCard.number = String(number) + \"%\";\n            that.infoCard.option.series[0].data[0].value = number - 0; // console.log(that.infoCard.option);\n\n            chart.setOption(that.infoCard.option, true);\n            break;\n\n          case \"CongestionDegree\":\n            // let station_id_map = JSON.parse(\n            //   localStorage.getItem(\"station_id_map\")\n            // );\n            // let id = station_id_map[e.data];\n            // console.log(\"id:\" + String(id));\n            var busy_number = Math.round(Math.random() * 100);\n            var free_number = Math.round(Math.random() * 100);\n            that.infoCard.option.series[0].data[0].value = free_number;\n            that.infoCard.option.series[0].data[1].value = busy_number;\n            that.infoCard.number = \"⭐\".repeat(Math.floor(free_number / (free_number + busy_number) * 5) + 1); // console.log(that.infoCard.option);\n\n            chart.setOption(that.infoCard.option, true);\n            break;\n        }\n      }\n    });\n\n    var chart = _echarts.default.init(document.getElementById(this.infoCard.name), \"macarons\");\n\n    if (this.infoCard.name === \"CurrentDensity\") {\n      chart.setOption(this.infoCard.option);\n      (0, _timers.setInterval)(this.update_option, 3000, chart, app); // var that = this;\n      // window.addEventListener(\"message\", function(e) {\n      //   if (e.source === window.frames[0]) {\n      // let station_id_map = JSON.parse(\n      //   localStorage.getItem(\"station_id_map\")\n      // );\n      // let id = station_id_map[e.data];\n      // console.log(\"test\" + e.data);\n      // let busy_number = Math.round(Math.random() * 100);\n      // let free_number = Math.round(Math.random() * 100);\n      // that.infoCard.title = e.data + that.infoCard.title.slice(-5);\n      // that.infoCard.option.series[0].data[1].value = busy_number;\n      // that.infoCard.number = \"⭐\".repeat(\n      //   Math.floor((free_number / (free_number + busy_number)) * 5) + 1\n      // );\n      // console.log(that.infoCard.option);\n      //   chart.setOption(that.infoCard.option, true);\n      // }\n      // });\n    } else if (this.infoCard.name === \"QueueNumber\") {\n      chart.setOption(this.infoCard.option);\n      (0, _timers.setInterval)(this.update_queued_option, 3000, chart, this.infoCard.maxData);\n    } else {\n      chart.setOption(this.infoCard.option);\n    }\n  },\n  computed: {\n    number: function number() {\n      return this.infoCard.number;\n    }\n  }\n};\nexports.default = _default;",null]}