{"remainingRequest":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/subway/Chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/subway/Chart.vue","mtime":1568876001120},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport echarts from 'echarts'\r\nimport Axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Chart',\r\n  data() {\r\n    return {}\r\n  },\r\n  mounted() {\r\n    var that = this\r\n    const chart = echarts.init(document.getElementById('chart'), 'roma')\r\n    const option = {\r\n      title: {\r\n        text: '入站量和出站量',\r\n        subtext: '火车东站'\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis'\r\n      },\r\n      legend: {\r\n        data: ['入站量', '出站量']\r\n      },\r\n      toolbox: {\r\n        show: true,\r\n        feature: {\r\n          mark: { show: true },\r\n          dataView: { show: true, readOnly: false },\r\n          magicType: { show: true, type: ['line', 'bar'] },\r\n          restore: { show: true }\r\n        }\r\n      },\r\n      calculable: true,\r\n      xAxis: [\r\n        {\r\n          type: 'category',\r\n          data: [\r\n            '16:30',\r\n            '16:40',\r\n            '16:50',\r\n            '17:00',\r\n            '17:10',\r\n            '17:20',\r\n            '17:30',\r\n            '17:40',\r\n            '17:50',\r\n            '18:00',\r\n            '18:10',\r\n            '18:20'\r\n          ]\r\n        }\r\n      ],\r\n      yAxis: [\r\n        {\r\n          type: 'value'\r\n        }\r\n      ],\r\n      series: [\r\n        {\r\n          name: '入站量',\r\n          type: 'bar',\r\n          data: [\r\n            2.0,\r\n            4.9,\r\n            7.0,\r\n            23.2,\r\n            25.6,\r\n            76.7,\r\n            135.6,\r\n            162.2,\r\n            32.6,\r\n            20.0,\r\n            6.4,\r\n            3.3\r\n          ],\r\n          markPoint: {\r\n            data: [{ type: 'max', name: '最大值' }]\r\n          },\r\n          markLine: {\r\n            data: [{ type: 'average', name: '平均值' }]\r\n          }\r\n        },\r\n        {\r\n          name: '出站量',\r\n          type: 'bar',\r\n          data: [\r\n            2.6,\r\n            5.9,\r\n            9.0,\r\n            26.4,\r\n            28.7,\r\n            70.7,\r\n            175.6,\r\n            182.2,\r\n            48.7,\r\n            18.8,\r\n            6.0,\r\n            2.3\r\n          ],\r\n          markPoint: {\r\n            data: []\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    chart.setOption(option)\r\n    window.addEventListener('message', function(e) {\r\n      if (e.source === window.frames[0] || !isNaN(e.data)) {\r\n        const get_station_url = 'http://127.0.0.1:8000/Flow/show_flow/'\r\n        const now = new Date()\r\n        let stand_name = '火车东站'\r\n        let date = now.getDate()\r\n        if (!isNaN(e.data)) {\r\n          date = date + e.data - 2\r\n        } else {\r\n          stand_name = e.data\r\n        }\r\n        const hour = now.getHours()\r\n        const minutes = now.getMinutes()\r\n        const station_id_map = JSON.parse(localStorage.getItem('station_id_map'))\r\n        const id = station_id_map[stand_name]\r\n        // console.log(id)\r\n        // console.log(id)\r\n        Axios.post(get_station_url, {\r\n          year: 2019,\r\n          month: 5,\r\n          dates: [date],\r\n          stations: [id]\r\n        })\r\n          .then(response => {\r\n            const data = response.data\r\n            const station_info = JSON.parse(localStorage.getItem('stationInfo'))\r\n            if (station_info != null) {\r\n              const station_id = Object.keys(data)[0]\r\n              if (station_info[station_id] === undefined) {\r\n                station_info[station_id] = data[station_id]\r\n              } else {\r\n                // merge station dates info\r\n                const dates = Object.keys(data[station_id])\r\n                for (let index = 0; index < dates.length; index++) {\r\n                  if (station_info[station_id][dates[index]] === undefined) {\r\n                    station_info[station_id][dates[index]] =\r\n                      data[station_id][dates[index]]\r\n                  }\r\n                }\r\n              }\r\n              localStorage.setItem('stationInfo', JSON.stringify(station_info))\r\n              const station_name = stand_name\r\n              if (!station_name.endsWith('站')) {\r\n                option.title.subtext = station_name.concat('站')\r\n              }\r\n              let time_slide_now = hour * 6 + Math.floor(minutes / 10)\r\n              time_slide_now = time_slide_now < 7 ? 7 : time_slide_now\r\n              // console.log(time_slide_now);\r\n              const range = 4\r\n              const old_color = 'gray'\r\n              for (let index = 0; index < 12; index++) {\r\n                // console.log(date);\r\n                // console.log(station_info)\r\n                if (index < range) {\r\n                  option.series[0].data[index] = {\r\n                    value:\r\n                      station_info[station_id]['date_'.concat(date.toString())][\r\n                        time_slide_now - range + index\r\n                      ]['in'],\r\n                    itemStyle: {\r\n                      color: '#CD5C5C'\r\n                    }\r\n                  }\r\n                  option.series[1].data[index] = {\r\n                    value:\r\n                      station_info[station_id]['date_'.concat(date.toString())][\r\n                        time_slide_now - range + index\r\n                      ]['out'],\r\n                    itemStyle: {\r\n                      color: '#4ad2ff'\r\n                    }\r\n                  }\r\n                } else if (index > range + 2) {\r\n                  option.series[0].data[index] = {\r\n                    value:\r\n                      station_info[station_id]['date_'.concat(date.toString())][\r\n                        time_slide_now - range + index\r\n                      ]['in'],\r\n                    itemStyle: {\r\n                      color: '#771100'\r\n                    }\r\n                  }\r\n                  option.series[1].data[index] = {\r\n                    value:\r\n                      station_info[station_id]['date_'.concat(date.toString())][\r\n                        time_slide_now - range + index\r\n                      ]['out'],\r\n                    itemStyle: {\r\n                      color: '#96B3D3'\r\n                    }\r\n                  }\r\n                } else {\r\n                  option.series[0].data[index] =\r\n                    station_info[station_id]['date_'.concat(date.toString())][\r\n                      time_slide_now - range + index\r\n                    ]['in']\r\n                  option.series[1].data[index] =\r\n                    station_info[station_id]['date_'.concat(date.toString())][\r\n                      time_slide_now - range + index\r\n                    ]['out']\r\n                }\r\n                const hour_now = Math.floor((time_slide_now - range + index) / 6)\r\n                const time_now = (time_slide_now - range + index) % 6\r\n                // console.log(option.xAxis);\r\n                option.xAxis[0].data[index] = String(hour_now)\r\n                  .concat(':')\r\n                  .concat(String(time_now).concat('0'))\r\n              }\r\n              chart.setOption(option)\r\n            } else {\r\n              localStorage.setItem('stationInfo', JSON.stringify(data))\r\n            }\r\n          })\r\n          .catch(error => window.console.log(error))\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    randomInt: function(maxData) {\r\n      return +(Math.random() * (maxData - 10)).toFixed(1)\r\n    }\r\n  }\r\n}\r\n",null]}