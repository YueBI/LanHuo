{"remainingRequest":"/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo-biyue/src/views/dashboard/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo-biyue/src/views/dashboard/index.vue","mtime":1557709353263},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Message } from 'element-ui'\nimport * as d3 from 'd3'\nimport axios from 'axios'\n// import { constants } from 'crypto'\nimport api from '@/api/similarity.js'\nimport imglink from '@/assets/map1.png'\nimport startlink from '@/assets/start.png'\nimport endlink from '@/assets/end.png'\nimport { Loading } from 'element-ui'\nexport default {\n  data() {\n    return {\n      starttimeValue: null, // 开始时间\n      endtimeValue: null, // 结束时间\n      startTime: null, // 开始时间临时值\n      endTime: null, // 结束时间临时值\n      maps: [], // 存储地图列表\n      selectedIndex: '', // 下拉框选择地图时的索引值\n      mapid: '',\n      userAid: '',\n      userBid: '',\n      userData: [], // 用户列表\n      similarityList: [], // 相似度列表\n      selectVal: '', // 用户输入框1 用户值\n      selectVal2: '', // 用户输入框2 用户值\n      isShow: false, // 是否显示用户列表以及确定按钮\n      flag: 0, // 确定是哪个用户输入框\n      currentRow: null, // 用户列表选中的行\n      isShowSimi: false, // 是否显示相似度列表\n      indoorTrackData: '', // 存放轨迹json文件\n      outdoorTrackData: '', // 存放轨迹json文件\n      num: 0, // 回放时的轨迹点的索引\n      timer: null, // 定时器名称\n      track: null,\n      activeName: 'in',// 室内或者室外\n      disabled: false,\n      showOutmap: false,\n      trackoutData:{}, // 存储室外轨迹数据的临时列表\n      trackDatas:[], // 存储总的数据\n      times: 0,\n      x_test:80,\n      y_test:80,\n      points_list_2:[],\n      points_list_3:[],\n      now:\"\",\n      trajectoryId:0, //  记录室外地图轨迹id的选择\n      nowpoints: [],\n      markerArr: [],\n      plPoints: [],\n      loadingText: '正在拼命加载中，请稍等......', // 相似度列表读取数据加载中\n      loading: false,\n      showdata: true,\n      userid: 0,\n      trajectorys: [],\n      namevalue: '',\n      idvalue: '',\n      showPath: false\n    }\n  },\n  mounted() {\n    Message.closeAll()\n  },\n  computed: {\n    // 将开始时间和结束时间组成一个总的，之后就可以两者同时监测\n    timeValue() {\n      const { starttimeValue, endtimeValue } = this\n      return {\n        starttimeValue,\n        endtimeValue\n      }\n    }\n  },\n  watch: {\n    // 监测开始时间和结束时间，确保开始时间不能大于结束时间，以及两者都不能大于当前系统的时间，否则就会出现错误提示\n    timeValue: {\n      handler: function(time) {\n        if (this.selectedIndex === '' && this.activeName === 'in') {\n          this.starttimeValue = null\n          this.endtimeValue = null\n          this.errorMessage(\"请先选择地图，再进行时间段的选择\")\n        } else {\n          this.startTime = time.starttimeValue\n          this.endTime = time.endtimeValue\n          Message.closeAll()\n          if (this.startTime === null || this.endTime === null || this.startTime === '' || this.endTime === '') {\n            this.errorMessage('开始时间或者结束时间都不能为空!')\n            // 当起止时间有一个清空的时候，那么右侧的用户列表、相似度列表以及用户都要清空\n            this.selectVal = ''\n            this.selectVal2 = ''\n            this.isShow = false\n            this.isShowSimi = false\n            // 并且显示出的筛选过的轨迹也要清空\n            var svg = d3.select('.app-main').select('svg')\n            svg.selectAll('circle').remove()\n            svg.selectAll('path').remove()\n            svg.selectAll('g').remove()\n            // svg.selectAll('.persentInf').remove();\n            // svg.select('.inforContent').remove();\n          } else if (new Date(this.startTime) > Date.now() || new Date(this.endTime) > Date.now()) {\n            // this.$refs.starttimeInput.$refs.reference.$refs.input.focus()\n            this.errorMessage('开始时间或结束时间都不能大于当前的时间！')\n          } else if (this.startTime > this.endTime) {\n            // this.$refs.starttimeInput.$refs.reference.$refs.input.focus()\n            this.errorMessage('开始时间不能大于结束时间')\n          } else {\n            // if (this.activeName === 'in') {\n            // 根据时间段绘制出该室内地图上的轨迹\n            this.showTrack(this.starttimeValue, this.endtimeValue)\n            // } else {\n            //   // 绘制室外地图轨迹\n            //   var that = this\n            //   // 设置延迟，是为了点击时间进行选择后，等待一下时间下拉框的消失\n            //   setTimeout(function (){\n            //     that.showouttrack(\"black\")\n            //     // that.showAlltrajectory()\n            //   }, 500)\n            //   // 设置全局的加载\n            //   let loadingInstance = Loading.service({\n            //       lock: true,\n            //       text:'拼命绘制轨迹地图中...',\n            //       spinner: 'el-icon-loading',\n            //       background: 'rgba(0, 0, 0, 0.7)'\n            //   });\n            //   // 因为读取和绘制需要时间，所以要延迟加载\n            //   setTimeout(function (){\n            //     loadingInstance.close();\n            //   }, 500)\n            // }\n          }\n        }\n      },\n      deep: true\n    },\n    trajectoryId: { // 监测轨迹id是否改变，一旦改变就更新存放数据的列表，绘制这个id轨迹\n      handler: function() {\n        console.log('数据开始传输')\n        this.hello()\n      }\n    },\n    selectedIndex: { // 监测地图选择框的变化\n      handler: function() {\n        // console.log(this.selectedIndex)\n        Message.closeAll()\n        // 当地图更换以后，更新该地图的室内用户\n        this.showIndoorUsers()\n        // 每当地图选择变换的时候，如果界面中存在轨迹，需要清空，并且重新绘制选择的地图的轨迹信息\n        // 先将轨迹信息清空\n        var svg = d3.select('.app-main').select('svg')\n        svg.selectAll('circle').remove()\n        svg.selectAll('path').remove()\n        svg.selectAll('g').remove()\n        svg.selectAll('img').remove()\n        // 重新绘制\n        this.showTrack(this.starttimeValue,this.endtimeValue)\n      }\n    }\n  },\n  methods: {\n    ////////////////室内室外兼顾/////////////////////\n    // 选择室内地图还是室外地图\n    handleSelect(index) {\n      Message.closeAll()\n      var svg = d3.select('.app-main').select('svg')\n      svg.selectAll('circle').remove()\n      svg.selectAll('path').remove()\n      svg.selectAll('g').remove()\n      svg.selectAll('img').remove()\n      this.starttimeValue = null\n      this.endtimeValue = null\n      this.selectVal = ''\n      this.selectVal2 = ''\n      console.log('清空数据')\n      if (index == 1) {\n        this.activeName = 'in' // 将标志设置为室内\n        this.showOutmap = false // 去除室外地图\n        this.disabled = false // 激活选择地图下拉框\n        this.showdata = true\n        // this.starttimeValue = null // 将时间清空，因为室内必须选择地图之后，才能进行时间段的选择\n        // this.endtimeValue = null\n      } else {\n        this.mymap();\n        this.setMapEvent() // 设置地图事件\n        this.addMapControl() // 向地图添加控件\n        // this.showAlltrajectory() // 更新室外地图轨迹信息\n        this.activeName = 'out' // 将标志设置为室外\n        this.disabled = true // 禁用选择地图选择下拉框\n        this.showOutmap = true // 显示室外地图\n        this.showdata = false\n        this.showOutdoorUsers()\n      }\n      console.log(this.activeName)\n      // console.log('清空数据')\n      // 转换室内或者室外之后要清空数据\n      // Message.closeAll()\n    },\n    // 当用户输入框获得焦点以后，则显示用户列表(当没有选择地图和时间段的时候会报错)\n    showList(flag) {\n      if (this.activeName === 'in') {\n        if (this.selectedIndex !== '' && this.starttimeValue !== '' && this.endtimeValue !== '' && this.starttimeValue !== null && this.endtimeValue !== null) {\n          Message.closeAll()\n          this.isShow = true\n          this.isShowSimi = false\n          this.flag = flag\n          this.showIndoorUsers()\n        } else {\n          this.errorMessage('请先选择地图和时间段')\n        }\n      } else {\n          Message.closeAll()\n          this.isShow = true\n          this.isShowSimi = false\n          this.flag = flag\n          // this.showOutdoorUsers()\n      }\n    },\n    // 根据输入内容提供对应的输入建议 查询并返回建议列表的数据\n    querySearch(queryString, cb) {\n        var userData = this.userData;\n        let userdataList = [];\n        for(let i=0;i<this.userData.length;i++){\n          userdataList.push({'value':userData[i].userName,'id':userData[i].userID})\n        }\n        var results = queryString ? userdataList.filter(this.createFilter(queryString)) : userdataList;\n        // 调用 callback 返回建议列表的数据\n        cb(results)\n    },\n    createFilter(queryString) {\n        return (userdataList) => {\n          return (userdataList.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\n        };\n    },\n    queryoutSearch(queryString, cb) {\n      var trajectorys = this.trajectorys;\n      let trajectorysList = [];\n      for(let i=0;i<this.trajectorys.length;i++){\n        trajectorysList.push({'value':String(trajectorys[i].trajectoryId)})\n      }\n      var results = queryString ? trajectorysList.filter(this.createFilter(queryString)) : trajectorysList;\n      cb(results)\n    },\n    handleoutUserSelect(item){\n      console.log(item)\n      // print(item.id)\n      this.userid = item.id // 更新用户的id\n      let para = {\n        \"userId\": this.userid,\n        \"startDate\":\"2018-3-5\",\n        \"endDate\":\"2018-3-6\"\n      }\n      var that = this\n      api.getOutdoorTrajectories(para).then(response=>{\n        console.log(\"接收成功\")\n        // console.log(response.data.content.list[1])\n        this.trajectorys = response.data.content.list\n      })\n    },\n    handletrajectorySelect(item) {\n      console.log(item)\n      var that = this\n      this.trajectoryId = parseInt(item.value)\n      setTimeout(function (){\n        that.showouttrack('black')\n      }, 1000)\n      var loadingInstance = Loading.service({\n          lock: true,\n          text:'拼命绘制轨迹地图中...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n      });\n      setTimeout(function (){\n        loadingInstance.close();\n      }, 1000)\n    },\n    handleUserSelect(item) {\n      if (this.flag === 1) {\n        // this.selectVal = item.value // 当检测到是第一个用户选择框的时候，则将第一个选择框的值进行更新\n        this.userAid = item.id // 更新用户的id\n        var linecolor = 'red'\n        var tid = 172\n      } else {\n        // this.selectVal2 = row.userName // 当检测到是第二个用户选择框的时候，则将第二个选择框的值进行更新\n        this.userBid = item.id // 更新用户的id\n        var linecolor = 'blue'\n        var tid = 173\n      }\n      // 判断是室内地图还是室外地图，然后进行用户地图绘制\n      if (this.activeName === 'in') { // 室内地图\n        this.showUserTrack(this.flag)\n      } else { // 室外地图\n        var that = this\n        this.trajectoryId = tid\n        setTimeout(function (){\n          that.showouttrack(linecolor)\n        }, 1000)\n        const loadingInstance = Loading.service({\n            lock: true,\n            text: '拼命绘制轨迹地图中...',\n            spinner: 'el-icon-loading',\n            background: 'rgba(0, 0, 0, 0.7)'\n        });\n        setTimeout(function (){\n          loadingInstance.close();\n        }, 1000)\n      }\n    },\n    // 当点击确定按钮之后，需要隐藏用户列表\n    hideList() {\n      this.isShow = false\n      this.currentRow = null\n      if (this.selectVal !== '' && this.selectVal2 !== '') { // 如果两个用户都有值，则需要显示相似度列表\n        this.isShowSimi = true\n        if (this.activeName === 'in') {\n          // this.showIndoorSimilarity()\n          this.showOutdoorSimilarity()  // 当后台算法连接好接口以后偶，就可以转换成上面那一句\n        }else {\n          this.showOutdoorSimilarity()\n        }\n      }\n      this.setCurrent()\n    },\n    // 选中列表中的值以后，更新输入框的值\n    handleRowClick(row) {\n      if (this.flag === 1) {\n        this.selectVal = row.userName // 当检测到是第一个用户选择框的时候，则将第一个选择框的值进行更新\n        this.userAid = row.userID // 更新用户的id\n        var linecolor = 'red'\n        var tid = 172\n      } else {\n        this.selectVal2 = row.userName // 当检测到是第二个用户选择框的时候，则将第二个选择框的值进行更新\n        this.userBid = row.userID // 更新用户的id\n        var linecolor = 'blue'\n        var tid = 187\n      }\n      this.currentRow = row // 将当前行存储下来\n      // 判断是室内地图还是室外地图，然后进行用户地图绘制\n      if (this.activeName === 'in') { // 室内地图\n        this.showUserTrack(this.flag)\n      } else { // 室外地图\n        var that = this\n        this.trajectoryId = tid\n        setTimeout(function (){\n          that.showouttrack(linecolor)\n        }, 1000)\n        let loadingInstance = Loading.service({\n            lock: true,\n            text:'拼命绘制轨迹地图中...',\n            spinner: 'el-icon-loading',\n            background: 'rgba(0, 0, 0, 0.7)'\n        });\n        setTimeout(function (){\n          loadingInstance.close();\n        }, 1000)\n      }\n    },\n    // 设置当前点击的行，传进去空的话就是取消选中状态\n    setCurrent(row) {\n      this.$refs.singleTable.setCurrentRow(row)\n    },\n    // 错误信息方法\n    errorMessage(mes) {\n      Message({\n        showClose: false,\n        message: mes,\n        type: 'error',\n        duration: 0\n      })\n    },\n    showSame(row) {\n      // 如果界面中有图像，则要先清除\n      if (this.activeName == 'in') {\n        var svg = d3.select('.app-main').select('svg')\n        svg.selectAll('circle').remove()\n        svg.selectAll('path').remove()\n        svg.selectAll('g').remove()\n        svg.selectAll('img').remove()\n        this.showTrackSame(row)\n      } else {\n        this.showoutTrackSame(row)\n      }\n    },\n    ////////////////////室内////////////////////////////////\n    // 获取室内地图列表\n    showIndoorMap() {\n      // 获取室内地图列表\n      if (this.activeName === 'in') {\n        api.queryIndoorMap().then(response => {\n          this.maps = response.data.content.list\n          console.log(\"获得地图列表的信息成功\")\n        })\n      }\n    },\n    // 显示地图图片\n    map(selectedIndex) {\n      // 获取图片位置以及地图的ID\n      this.mapid = this.maps[selectedIndex].mapId\n      var mapImg = this.maps[selectedIndex].mapSrc\n      var mapImg = imglink // 暂时用本地图片替代\n      // 通过接口获得图片，暂时还没测试成功\n      // let para = {\n      //   mapId: parseInt(this.mapid)\n      // }\n      // api.queryMapByMapId(para,{\n      //   // responseType: 'arraybuffer'\n      //   responseType: \"blob\"\n      // }).then(res => {\n      //   console.log('jinru')\n      //   const content = res\n      //   const blob = new Blob([content])\n      //   let url = window.URL.createObjectURL(blob)\n      //   console.log(url)\n      //   // var temp = require(url)\n      //   // console.log(temp)\n      //   this.addMap(url, selectedIndex)\n      //   // this.mapImg = url;\n      // }).catch(err => {\n      //   console.log('加载失败')\n      // });\n      // 添加图片\n      this.addMap(mapImg, selectedIndex)\n    },\n    addMap(mapImg, selectedIndex) {\n      // 切换，如果那个位置有图片，需要先移除那个地方的图片再添加\n      if (d3.select('.app-main').selectAll('image').empty() === false) {\n        d3.selectAll('image').remove()\n      }\n      // console.log(mapImg, selectedIndex)\n      //  获得svg标签\n      var svg = d3.select('.app-main').select('svg')\n      var imgs = svg.selectAll('images' + selectedIndex)\n      imgs.data([0])\n        .enter()\n        .append('svg:image')\n        .attr('xlink:href', mapImg)\n      // 添加位置标注图标，可用于用户位置的标注，目前还用不到\n      // var location1 = svg.append('g').attr('transform', 'translate(100,100)')\n      // location1.append('svg:image').attr('xlink:href', '../static/icon.png')\n      // var location2 = svg.append('g').attr('transform', 'translate(101,101)')\n      // location2.append('svg:image').attr('xlink:href', '../static/icon.png')\n    },\n    // 读取室内用户列表，并将用户列表进行更新\n    showIndoorUsers() {\n      var data\n      var that = this\n      let para = {\n        mapId: parseInt(this.mapid)\n      }\n      api.getIndoorUsers(para).then(response => {\n        data = response.data.content.list\n        console.log(\"获得用户列表的信息\")\n        if (data) {\n          var datalist = []\n          data.forEach(function(item) {\n            var lists = { 'userID': '', 'userName': '' }\n            if (item){\n              lists['userID'] = item['userId']\n              lists['userName'] = item['userName']\n              datalist.push(lists)\n            } \n          })\n          that.userData = datalist\n        }\n      })\n    },\n    // 显示室内轨迹相似度\n    showIndoorSimilarity() {\n      this.loading = true\n      var data\n      var that = this\n      let para = {\n        userAID : parseInt(this.userAid),\n        userBID : parseInt(this.userBid),\n        mapId : parseInt(this.mapid),\n        startDate : \"2008-07-04\",\n        endDate : \"2009-09-04\"\n      }\n      // console.log(para)\n      api.getIndoorSimilarity(para).then(response => { // 获取室内用户相似度并更新相似度列表\n        this.loading = false\n        data = response.data.content.trajectory\n        // data = response.data.content.list\n        console.log(\"获得室内相似度的信息\")\n        var dataitem = []\n        data.forEach(function(item) {\n          dataitem.push({\n            trajectoryAid: item['trajectoryAID'],\n            trajectoryBid: item['trajectoryBID'],\n            similarity: item['similarity']\n          })\n        })\n        that.similarityList = dataitem\n      })\n    },\n    // 当点击相似度那一行的时候，要在图中显示出轨迹\n    showTrackSame(row) {\n      // 如果界面中有图像，则要先清除\n      var svg = d3.select('.app-main').select('svg')\n      svg.selectAll('circle').remove()\n      svg.selectAll('path').remove()\n      svg.selectAll('g').remove()\n      svg.selectAll('img').remove()\n      var data\n      var that = this\n      var link\n      let para = {\n        trajectoryID: parseInt(row.trajectoryAid)\n      }\n      let parab = {\n        trajectoryID: parseInt(row.trajectoryBid)\n      }\n      api.getIndoorTrajectoryDetail(para).then(response => {\n        console.log(response.data.content.list)\n        data = response.data.content.list\n        // data = data[para.trajectoryId]\n        console.log(\"获得该轨迹的详细信息\")\n        console.log(data)\n        // // return data\n        // that.track = data\n        this.showTrackdots(data,'blue')\n        // that.$forceUpdate()\n      })\n      api.getIndoorTrajectoryDetail(parab).then(response => {\n        data = response.data.content.list\n        // data = data[parab.trajectoryId]\n        console.log(\"获得该轨迹的详细信息\")\n        console.log(data)\n        // // return data\n        // that.track = data\n        this.showTrackdots(data,'red')\n        // that.$forceUpdate()\n      })\n    },\n    // 显示室内该时间段用户轨迹点\n    showdots() {\n      if (this.showPath) {\n        this.showTrack(this.starttimeValue,this.endtimeValue)\n      } else {\n        // 添加\n        var svg = d3.select('.app-main').select('svg')\n        svg.selectAll('path').remove()\n        svg.selectAll('g').remove()\n        svg.selectAll('img').remove()\n      }\n      this.showPath = !this.showPath\n      \n      // this.trackDatas.forEach(function(item) {\n      //   var x = (item.x / 1019) * 4167 // 获取x轴坐标\n      //   var y = (item.y / 1019) * 4167 // 获取y轴坐标\n      //   svg.append('circle') // 紫色圆圈绘制，位置半径\n      //     .attr('cx', x)\n      //     .attr('cy', y)\n      //     .attr('r', 15)\n      //     .style('fill', 'red')\n      // })\n    },\n    // 显示室内单条轨迹\n    showTrackdots(indoorItem,color) {\n      // 添加轨迹\n      var svg = d3.select('.app-main').select('svg')\n      // var svg = d3.select('svg')\n      var start = true\n      var path = ''\n      // foreach读取json中的每个坐标的位置，并连接坐标形成路径，用path画出\n      indoorItem.forEach(function(item) {\n        var x = (item.x / 1019) * 4167 // 获取x轴坐标\n        var y = (item.y / 1019) * 4167 // 获取y轴坐标\n        // var y = (item.y / 1219) * 2190 // 获取y轴坐标\n        // 圆是最初想用来表示轨迹，发现坐标部分间隔太远，改用path\n        // svg.append('circle') // 紫色圆圈绘制，位置半径\n        //   .attr('cx', x)\n        //   .attr('cy', y)\n        //   .attr('r', 25)\n        //   .style('fill', 'purple')\n        svg.append('circle') // 紫色圆圈绘制，位置半径\n          .attr('cx', x)\n          .attr('cy', y)\n          .attr('r', 15)\n          .style('fill', 'red')\n        if (start) {\n          path += 'M' + x + ' ' + y + ' '\n          start = false\n        } else {\n          path += 'L' + x + ' ' + y + ' '\n        }\n      })\n      // 添加路径\n      svg.append('path')\n        .attr('fill', 'transparent')\n        .attr('stroke', color)\n        .attr('stroke-width', '15')\n        .attr('stroke-linecap', 'round')\n        .attr('v-bind:id', 'moveTrack')\n        .attr('d', path)\n\n      // 添加起点和终点的标注\n      var startdot = indoorItem[0]\n      var enddot = indoorItem[indoorItem.length - 1]\n      // var startIcon = 'translate(' + ((startdot.x / 1019) * 4167 - 80) + ',' + ((startdot.y / 1219) * 2190 - 200) + ')'\n      // var endIcon = 'translate(' + ((enddot.x / 1019) * 4167 - 80) + ',' + ((enddot.y / 1219) * 2190 - 200) + ')'\n      var startIcon = 'translate(' + ((startdot.x / 1019) * 4167 - 80) + ',' + ((startdot.y / 1019) * 4167 - 80) + ')'\n      var endIcon = 'translate(' + ((startdot.x / 1019) * 4167 - 80) + ',' + ((startdot.y / 1019) * 4167 - 80) + ')'\n      var location1 = svg.append('g').attr('transform', startIcon)\n      location1.append('svg:image')\n        .attr('xlink:href', startlink)\n        .attr('width', '200px')\n        .attr('height', '200px')\n      // location1.append('svg:image')\n      //   .attr('xlink:href', '//a.amap.com/jsapi_demos/static/demo-center/icons/poi-marker-red.png')\n      //   .attr('width', '200px')\n      //   .attr('height', '200px')\n      var location2 = svg.append('g').attr('transform', endIcon)\n      location2.append('svg:image')\n        .attr('xlink:href', endlink)\n        .attr('width', '200px')\n        .attr('height', '200px')\n    },\n    // 显示符合条件的一条或者多条轨迹\n    showTrack(starttime, endtime) {\n      // 先判断这是哪个地图,找到这个地图中的所有轨迹\n      // imgs[selectedIndex].maplabel\n      // tracks = []\n      // 判断这些轨迹是否在时间段内，如果在则绘制出来轨迹；否则就不再绘制\n      // 可使用的思路是 判断轨迹的起点和终点的时间是否在时间段中，如果在则绘制，否则就跳过\n      if (starttime === null || endtime === null || starttime === '' || endtime === '') {\n        return\n      }\n      var data\n      var that = this\n      console.log(this.userData)\n      this.userData.forEach((item) => {\n        console.log(\"接收用户成功\")\n        let para = {\n          userID : parseInt(item.userID),\n          mapID : parseInt(this.mapid)\n          // startDate : this.starttimeValue,\n          // endDate : this.endtimeValue\n        }\n        api.getIndoorTrajectories(para).then(response => {\n          console.log(\"接收成功\")\n          data = response.data.content.list\n          // console.log(\"获取用户的轨迹\")\n          // data = data[para.trajectoryID]\n          data.forEach(function(item) {\n            // console.log(item)\n            // item = item.trajectoryID\n            let tid = {\n              trajectoryId : parseInt(item.trajectoryId)\n            }\n            // console.log(tid)\n            // this.showIndoorTrajectoryDetail(item.trajectoryID)\n            api.getIndoorTrajectoryDetail(tid).then(response => {\n              item = response.data.content.list\n              // item = data[tid.trajectoryID]\n              console.log(\"获得该轨迹的详细信息\")\n              var start = item[0]['timeStamp']\n              // console.log(start)\n              var end = item[item.length - 1]['timeStamp']\n              var getTime = new Date(start)\n              start = getTime.toLocaleString()\n              getTime = new Date(end)\n              end = getTime.toLocaleString()\n              if (start >= new Date(starttime).toLocaleString() && end <= new Date(endtime).toLocaleString()) {\n                console.log(\"绘制轨迹\")\n                that.trackDatas = item\n                that.showTrackdots(item,\"black\")\n              }\n            })\n          })\n        })\n      })\n    },\n    // 用不同的颜色显示室内用户的轨迹\n    showUserTrack(flag) {\n      var para\n      var linecolor\n      var that = this\n      if (flag === 1) {\n        para = {\n          userID : parseInt(this.userAid),\n          mapID : parseInt(this.mapid)\n          // startDate : \"2008-09-03\",\n          // endDate : \"2008-09-03\"\n        }\n        linecolor = 'blue'\n      } else {\n        para = {\n          userID : parseInt(this.userBid),\n          mapID : parseInt(this.mapid)\n          // startDate : \"2008-09-03\",\n          // endDate : \"2008-09-03\"\n        }\n        linecolor = 'red'\n      }\n      // 对轨迹进行绘制\n      api.getIndoorTrajectories(para).then(response => {\n        let data = response.data.content.list\n        data.forEach(function(item) {\n          let tid = {\n            trajectoryId : parseInt(item.trajectoryId)\n          }\n          api.getIndoorTrajectoryDetail(tid).then(response => {\n              item = response.data.content.list\n              that.showTrackdots(item,linecolor)\n          })\n        })\n      })\n    },\n    ////////////////////室外////////////////////////////////\n    // 百度地图 室外地图的创建引入\n    mymap() {\n      var map = new BMap.Map(\"myMap\"); //在百度地图容器中创建一个地图\n      var point = new BMap.Point(116.395645, 39.937953); //定义一个中心点坐标\n      map.centerAndZoom(point, 12); //设定地图的中心点和坐标并将地图显示在地图容器中\n      window.map = map; //将map变量存储在全局\n    },\n    // 设置一些地图默认事件\n    setMapEvent() {\n      map.enableDragging(); //启用地图拖拽事件，默认启用(可不写)\n      map.enableScrollWheelZoom(); //启用地图滚轮放大缩小\n      map.enableDoubleClickZoom(); //启用鼠标双击放大，默认启用(可不写)\n      map.enableKeyboard(); //启用键盘上下左右键移动地图\n    },\n    // 添加控件\n    addMapControl() {\n      //向地图中添加缩放控件\n      var ctrl_nav = new BMap.NavigationControl({\n        anchor: BMAP_ANCHOR_TOP_LEFT,\n        type: BMAP_NAVIGATION_CONTROL_LARGE\n      });\n      map.addControl(ctrl_nav);\n      //向地图中添加缩略图控件\n      var ctrl_ove = new BMap.OverviewMapControl({\n        anchor: BMAP_ANCHOR_BOTTOM_RIGHT,\n        isOpen: 1\n      });\n      map.addControl(ctrl_ove);\n      //向地图中添加比例尺控件\n      var ctrl_sca = new BMap.ScaleControl({ anchor: BMAP_ANCHOR_BOTTOM_LEFT });\n      map.addControl(ctrl_sca);\n    },\n    // 显示室外用户列表\n    showOutdoorUsers() {\n      var data\n      var that = this\n      api.getOutdoorUsers().then(response => {\n        data = response.data.content.list\n        console.log(\"获得室外用户列表的信息\")\n        console.log(data)\n        if (data) {\n          var datalist = []\n          data.forEach(function(item) {\n            var lists = { 'userID': '', 'userName': '' }\n            if (item){\n              lists['userID'] = item['userId']\n              lists['userName'] = item['userName']\n              datalist.push(lists)\n            } \n          })\n          that.userData = datalist\n        }\n      })\n    },\n    // 显示室外轨迹相似度\n    showOutdoorSimilarity() {\n      var data\n      var that = this\n      let para = {\n        userAID : 0,\n        userBID : 1,\n        startDate : \"2008-07-04\",\n        endDate : \"2009-09-04\"\n      }\n      console.log(para)\n      api.getOutdoorSimilarity(para).then(response => { // 获取室内用户相似度\n        // console.log(response.data.content)\n        data = response.data.content.trajectory\n        console.log(\"获得相似度的信息\")\n        // console.log(data)\n        var dataitem = []\n        data.forEach(function(item) {\n          dataitem.push({\n            trajectoryAid: item['trajectoryAID'],\n            trajectoryBid: item['trajectoryBID'],\n            similarity: item['similarity']\n          })\n        })\n        that.similarityList = dataitem\n      })\n    },\n    // 当点击相似度那一行的时候，要在图中显示出轨迹\n    showoutTrackSame(row) {\n      var data\n      var that = this\n      var link\n      this.trajectoryId = row.trajectoryAid\n      setTimeout(function (){\n        that.showouttrack(\"red\")\n      }, 1000)\n      var loadingInstance = Loading.service({\n          lock: true,\n          text:'拼命绘制轨迹地图中...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n      });\n      setTimeout(function (){\n        loadingInstance.close();\n      }, 1000)\n      this.trajectoryId = row.trajectoryBid\n      // this.trajectoryId = 175\n      setTimeout(function (){\n        that.showouttrack(\"red\")\n      }, 1000)\n      var loadingInstance = Loading.service({\n          lock: true,\n          text:'拼命绘制轨迹地图中...',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n      });\n      setTimeout(function (){\n        loadingInstance.close();\n      }, 1000)\n      // let para = {\n      //   \"trajectoryID\": parseInt(row.trajectoryAid)\n      // }\n      // let parab = {\n      //   \"trajectoryID\": parseInt(row.trajectoryBid)\n      // }\n      // api.getOutdoorTrajectoryDetail(para).then(response => {\n      //     console.log(\"接收成功\")\n      //     data = response.data.content.list\n      //     this.trajectoryId = data.trajectoryId \n      //     that.showouttrack(\"blue\");\n      //     // that.showoutTrackdots(item,linecolor)\n      // })\n      // api.getOutdoorTrajectoryDetail(parab).then(response => {\n      //     console.log(\"接收成功\")\n      //     data = response.data.content.list\n      //     that.showouttrack(\"red\");\n      //     // that.showoutTrackdots(item,linecolor)\n      // })\n    },\n    // 用不同的颜色显示室外用户的轨迹\n    showUseroutTrack(flag) {\n      var para\n      var linecolor\n      var that = this\n      if (flag === 1) {\n        para = {\n          userID : parseInt(this.userAid)\n          // startDate : this.starttimeValue,\n          // endDate : this.endtimeValue\n        }\n        linecolor = 'blue'\n      } else {\n        para = {\n          userID : parseInt(this.userBid)\n          // startDate : this.starttimeValue,\n          // endDate : this.endtimeValue\n        }\n        linecolor = 'red'\n      }\n      // 对轨迹进行绘制\n      api.getOutdoorTrajectories(para).then(response => {\n        let data = response.data.content.list\n        data.forEach(function(item) {\n          let tid = {\n            trajectoryId : parseInt(item.trajectoryId)\n          }\n          api.getOutdoorTrajectoryDetail(tid).then(response => {\n              item = response.data.content.list\n              that.showouttrack(linecolor);\n              // that.showoutTrackdots(item,linecolor)\n          })\n        })\n      })\n    },\n    // 显示室外轨迹\n    showouttrack(linecolor) {\n      this.mymap(); //创建地图\n      this.setMapEvent(); //设置地图事件\n      this.addMapControl(); //向地图添加控件\n      this.addPolyline(linecolor);\n    },\n    addPolyline(linecolor) {\n      for (var i = 0; i < this.plPoints.length; i++) {\n        var json = this.plPoints[i];\n        var points = [];\n        for (var j = 0; j < json.points.length; j++) {\n          var p1 = json.points[j].split(\"|\")[0];\n          var p2 = json.points[j].split(\"|\")[1];\n          var point = new BMap.Point(p1, p2);\n          map.centerAndZoom(point, 16);\n          points.push(new BMap.Point(p1, p2));\n        }\n        var line = new BMap.Polyline(points, {\n          strokeStyle: json.style,\n          strokeWeight: json.weight,\n          strokeColor: linecolor,\n          strokeOpacity: json.opacity\n        });\n        map.addOverlay(line);\n      }\n    },\n    showAlltrajectory(){\n      let para = {\n        \"userId\": 1,\n        \"startDate\":\"2018-3-5\",\n        \"endDate\":\"2018-3-6\"\n      }\n      var that = this\n      api.getOutdoorTrajectories(para).then(response=>{\n        console.log(\"接收成功\")\n        // console.log(response.data.content.list[1])\n        var data = response.data.content.list\n        data.forEach((item) => {\n          // console.log(item)\n          that.trajectoryId = item.trajectoryId\n        })\n      })\n    },\n    hello(){\n      console.log(this.trajectoryId)\n      //获取轨迹信息\n      let para = {\n        \"trajectoryID\": this.trajectoryId\n      }\n      // console.log(para)\n      console.log(\"开始接收\")\n      api.getOutdoorTrajectoryDetail(para).then(response=>{\n        console.log(\"接收成功\")\n        // console.log(response.data.content.list[1])\n        var number1=0\n        this.trackoutData = response.data.content.list\n        // this.trackoutDatas.append(this.trackoutData)\n        var i=0\n        for(i in this.trackoutData){\n          this.x_2=this.trackoutData[i][\"latitude\"]\n          this.y_2=this.trackoutData[i][\"longitude\"]\n          this.solepoint=this.y_2+\"|\"+this.x_2,\n          this.points_list_2.push(this.solepoint)\n        }\n        for(i in this.trackoutData){\n          this.x_2=this.trackoutData[i][\"latitude\"]\n          this.y_2=this.trackoutData[i][\"longitude\"]\n          this.solepoint=this.y_2+\"|\"+this.x_2,\n          this.points_list_3.push(\n            {\n          title: null,\n          content: null,\n          point:this.solepoint,\n          isOpen: 0,\n          icon: { w: 100, h: 21, l: 0, t: 0, x: 6, lb: 5 }\n        }\n          )\n        }\n        this.markerArr=this.points_list_3\n        this.plPoints=[\n        {\n          style: \"solid\",\n          weight: 4,\n          color: \"#f00\",\n          opacity: 0.6,\n          points: this.points_list_2\n        }\n      ]\n\n        this.x_1=((this.trackoutData)[0][\"latitude\"])\n        this.y_1=((this.trackoutData)[0][\"longitude\"])\n        this.nowpoints[0]=\n        {\n          title: null,\n          content: null,\n          point:this.y_1+\"|\"+this.x_1,\n          isOpen: 0,\n          icon: { w: 100, h: 21, l: 0, t: 0, x: 6, lb: 5 }\n        }\n      },\n      err=>{\n        // console.log(err)\n        console.log(\"接收失败\")\n      })\n    }\n  }\n}\n",null]}