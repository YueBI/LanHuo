{"remainingRequest":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/dengyuankang/showTrack.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/dengyuankang/showTrack.vue","mtime":1562048951811},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters } from 'vuex'\r\nimport axios from 'axios'\r\nimport * as d3 from 'd3'\r\n// 引入json文件\r\nimport mapPath from '@/assets/map1.jpg'\r\nimport startPath from '@/assets/start.png'\r\nimport endPath from '@/assets/end.png'\r\nimport iconPath from '@/assets/icon.png'\r\nimport inforPath from '@/assets/infor.png'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      // 存放轨迹json文件\r\n      trackData: [],\r\n      // 回放时的轨迹点的索引\r\n      num: 0,\r\n      // 定时器名称\r\n      timer: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'name'\r\n    ])\r\n  },\r\n  mounted() {\r\n    this.map()\r\n  },\r\n  created() {\r\n    // 在这保存json文件到trackData中\r\n    this.trackData = myData\r\n  },\r\n  methods: {\r\n    // 显示地图\r\n    map: function() {\r\n      // 获取轨迹信息\r\n      axios.post('http://112.74.189.126:8080/bluefire/Integererface/data_manage/getIndoorTrajectoryDetail', {\r\n        trajectoryId: this.$route.query.trajectoryId\r\n      })\r\n        .then(response => {\r\n          console.log('接收成功')\r\n          this.trackData = response.data.content.list\r\n        },\r\n        err => {\r\n          conslog.log('接收失败')\r\n        })\r\n      // 获得svg标签\r\n      var svg = d3.select('#mapCon')\r\n      // 添加地图\r\n      var imgs = svg.selectAll('image')\r\n      imgs.data([0])\r\n        .enter()\r\n        .append('svg:image')\r\n        .attr('xlink:href', mapPath)\r\n    },\r\n    myTrack: function() {\r\n      // 添加轨迹\r\n      var svg = d3.select('#mapCon')\r\n      var start = true\r\n      var path = ''\r\n      // foreach读取json中的每个坐标的位置，并连接坐标形成路径，用path画出\r\n      this.trackData.forEach(function(item) {\r\n        console.log('1')\r\n        var x = (item.x / 1019) * 4167\r\n        var y = (item.y / 1219) * 2190\r\n        // 圆是最初想用来表示轨迹，发现坐标部分间隔太远，改用path\r\n        var circle2 = svg.append('circle')\r\n          .attr('cx', x)\r\n          .attr('cy', y)\r\n          .attr('r', 20)\r\n          .style('fill', 'purple')\r\n        if (start) {\r\n          path += 'M' + x + ' ' + y + ' '\r\n          start = false\r\n        } else {\r\n          path += 'L' + x + ' ' + y + ' '\r\n        }\r\n      })\r\n      // 添加路径\r\n      svg.append('path')\r\n        .attr('fill', 'transparent')\r\n        .attr('stroke', '#000000')\r\n        .attr('stroke-width', '25')\r\n        .attr('stroke-linecap', 'round')\r\n        .attr('v-bind:id', 'moveTrack')\r\n        .attr('d', path)\r\n      // 添加起点和终点的标注\r\n      var start = this.trackData[0]\r\n      var end = this.trackData[this.trackData.length - 1]\r\n      var startIcon = 'translate(' + ((start.x / 1019) * 4167 - 80) + ',' + ((start.y / 1219) * 2190 - 200) + ')'\r\n      var endIcon = 'translate(' + ((end.x / 1019) * 4167 - 80) + ',' + ((end.y / 1219) * 2190 - 200) + ')'\r\n      var location1 = svg.append('g').attr('transform', startIcon)\r\n      location1.append('svg:image')\r\n        .attr('xlink:href', startPath)\r\n        .attr('width', '200px')\r\n        .attr('height', '200px')\r\n      var location2 = svg.append('g').attr('transform', endIcon)\r\n      location2.append('svg:image')\r\n        .attr('xlink:href', endPath)\r\n        .attr('width', '200px')\r\n        .attr('height', '200px')\n    },\r\n    // 开始播放，设置循环执行函数，每0.5s执行一次\r\n    start: function() {\r\n      // 防止多次添加循环执行函数\r\n      if (!this.timer) { this.timer = setInterval(this.showTrack, 500) }\r\n    },\r\n    // 暂停播放\r\n    pause: function() {\r\n    // 防止多次删除循环执行函数\r\n      if (this.timer) { clearInterval(this.timer) }\r\n      this.timer = null\r\n    },\r\n    // 重置播放\r\n    reset: function() {\r\n      if (this.timer) {\r\n        clearInterval(this.timer)\r\n        this.timer = null\r\n      }\r\n      this.num = 0\r\n      var svg = d3.select('#mapCon')\r\n      svg.select('#persentLocation').remove()\r\n      svg.selectAll('.persentInf').remove()\r\n      svg.select('.inforContent').remove()\r\n    },\r\n    // 要循环执行的函数,每次循环删去前一个轨迹点，显示新的轨迹点\r\n    showTrack: function() {\r\n      var svg = d3.select('#mapCon')\r\n      var item = this.trackData[this.num]\r\n      var x = (item.x / 1019) * 4167\r\n      var y = (item.y / 1219) * 2190\r\n      var time = item.time\r\n      console.log(this.num)\r\n      console.log('x:' + x)\r\n      console.log('y:' + y)\r\n      svg.select('#persentLocation').remove()\r\n      svg.selectAll('.persentInf').remove()\r\n      svg.select('.inforContent').remove()\r\n      // 轨迹点\r\n      var circle = svg.append('circle')\r\n        .attr('cx', x)\r\n        .attr('cy', y)\r\n        .attr('r', 20)\r\n        .style('fill', 'red')\r\n        .attr('id', 'persentLocation')\r\n      // 提示框气泡\r\n      var offset = 'translate(' + (x - 320) + ',' + (y - 440) + ')'\r\n      var scale = 'scale(2.8 1.5)'\r\n      var location = svg.append('g')\r\n        .attr('class', 'inforContent')\r\n      var image = location.append('image')\r\n        .attr('transform', offset + scale)\r\n        .attr('xlink:href', inforPath)\r\n      // .attr(\"transform\",\"scale(2 1)\");\r\n      // 提示内容\r\n      var text = svg.append('text')\r\n        .attr('x', x + 20)\r\n        .attr('y', y - 260)\r\n        .text('x: ' + item.x)\r\n        .style('font-size', '70px')\r\n        .attr('class', 'persentInf')\r\n      var text2 = svg.append('text')\r\n        .attr('x', x + 20)\r\n        .attr('y', y - 180)\r\n        .text('y: ' + item.y)\r\n        .style('font-size', '70px')\r\n        .attr('class', 'persentInf')\r\n      var text3 = svg.append('text')\r\n        .attr('x', x + 20)\r\n        .attr('y', y - 100)\r\n        .text('time: ' + time)\r\n        .style('font-size', '70px')\r\n        .attr('class', 'persentInf')\r\n      this.num += 1\r\n      if (this.num >= this.trackData.length) {\r\n        clearInterval(this.timer)\r\n        this.num = 0\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}