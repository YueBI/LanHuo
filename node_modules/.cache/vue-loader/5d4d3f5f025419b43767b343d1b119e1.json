{"remainingRequest":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/wenyu/showTrack.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/wenyu/showTrack.vue","mtime":1568880951635},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters } from 'vuex'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      trackData: {},\r\n      times: 0,\r\n      x_test: 80,\r\n      y_test: 80,\r\n      points_list_2: [],\r\n      points_list_3: [],\r\n      now: '',\r\n      trajectoryId: 0,\r\n      nowpoints: [],\r\n      markerArr: [],\r\n      plPoints: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['name'])\r\n  },\r\n  mounted() {\r\n    this.mymap()\r\n    this.hello()\r\n  },\r\n  methods: {\r\n    hello() {\r\n      this.trajectoryId = this.$route.query.trajectoryId\r\n      // 获取轨迹信息\r\n      axios.post('http://112.74.189.126:8080/bluefire/Integererface/data_manage/getOutdoorTrajectoryDetail', {\r\n        'trajectoryId': this.trajectoryId\r\n      })\r\n        .then(response => {\r\n          console.log('接收成功')\r\n          console.log(response.data.content.list[1])\r\n          var number1 = 0\r\n          this.trackData = response.data.content.list\r\n          var i = 0\r\n          for (i in this.trackData) {\r\n            this.x_2 = this.trackData[i]['latitude']\r\n            this.y_2 = this.trackData[i]['longitude']\r\n            this.solepoint = this.y_2 + '|' + this.x_2,\r\n            this.points_list_2.push(this.solepoint)\r\n          }\r\n          for (i in this.trackData) {\r\n            this.x_2 = this.trackData[i]['latitude']\r\n            this.y_2 = this.trackData[i]['longitude']\r\n            this.solepoint = this.y_2 + '|' + this.x_2,\r\n            this.points_list_3.push(\r\n              {\r\n                title: null,\r\n                content: null,\r\n                point: this.solepoint,\r\n                isOpen: 0,\r\n                icon: { w: 100, h: 21, l: 0, t: 0, x: 6, lb: 5 }\r\n              }\r\n            )\r\n          }\r\n          this.markerArr = this.points_list_3\r\n          this.plPoints = [\r\n            {\r\n              style: 'solid',\r\n              weight: 4,\r\n              color: '#f00',\r\n              opacity: 0.6,\r\n              points: this.points_list_2\r\n            }\r\n          ]\r\n\r\n          this.x_1 = ((this.trackData)[0]['latitude'])\r\n          this.y_1 = ((this.trackData)[0]['longitude'])\r\n          this.nowpoints[0] =\r\n        {\r\n          title: null,\r\n          content: null,\r\n          point: this.y_1 + '|' + this.x_1,\r\n          isOpen: 0,\r\n          icon: { w: 100, h: 21, l: 0, t: 0, x: 6, lb: 5 }\r\n        }\r\n        },\r\n        err => {\r\n          conslog.log('接收失败')\r\n        })\r\n    },\r\n\r\n    showtrack() {\r\n      this.mymap() // 创建地图\r\n      this.setMapEvent() // 设置地图事件\r\n      this.addMapControl() // 向地图添加控件\r\n      this.addPolyline()\r\n    },\r\n    showpoint() {\r\n      this.mymap() // 创建地图\r\n      this.setMapEvent() // 设置地图事件\r\n      this.addMapControl() // 向地图添加控件\r\n      this.nowpoint()\r\n    },\r\n    showplayback() {\r\n      this.times = 0,\r\n      this.mymap() // 创建地图\r\n      this.setMapEvent() // 设置地图事件\r\n      this.addMapControl() // 向地图添加控件\r\n      this.playtrack()\r\n    },\r\n    mymap() {\r\n      var map = new BMap.Map('myMap') // 在百度地图容器中创建一个地图\r\n      var point = new BMap.Point(116.395645, 39.937953) // 定义一个中心点坐标\r\n      map.centerAndZoom(point, 12) // 设定地图的中心点和坐标并将地图显示在地图容器中\r\n      window.map = map // 将map变量存储在全局\r\n    },\r\n    setMapEvent() {\r\n      map.enableDragging() // 启用地图拖拽事件，默认启用(可不写)\r\n      map.enableScrollWheelZoom() // 启用地图滚轮放大缩小\r\n      map.enableDoubleClickZoom() // 启用鼠标双击放大，默认启用(可不写)\r\n      map.enableKeyboard() // 启用键盘上下左右键移动地图\r\n    },\r\n    addMapControl() {\r\n      // 向地图中添加缩放控件\r\n      var ctrl_nav = new BMap.NavigationControl({\r\n        anchor: BMAP_ANCHOR_TOP_LEFT,\r\n        type: BMAP_NAVIGATION_CONTROL_LARGE\r\n      })\r\n      map.addControl(ctrl_nav)\r\n      // 向地图中添加缩略图控件\r\n      var ctrl_ove = new BMap.OverviewMapControl({\r\n        anchor: BMAP_ANCHOR_BOTTOM_RIGHT,\r\n        isOpen: 1\r\n      })\r\n      map.addControl(ctrl_ove)\r\n      // 向地图中添加比例尺控件\r\n      var ctrl_sca = new BMap.ScaleControl({ anchor: BMAP_ANCHOR_BOTTOM_LEFT })\r\n      map.addControl(ctrl_sca)\r\n    },\r\n    playtrack() {\r\n      this.addPolyline()\r\n      this.addMarker()\r\n    },\r\n    addMarker() {\r\n      if (this.times < this.markerArr.length) {\r\n        var _this = this\r\n        this.part(this.times)\r\n        this.times += 1\r\n        setTimeout(_this.addMarker, 500)\r\n      }\r\n    },\r\n    part(i) {\r\n      var _this = this\r\n      var json = this.markerArr[i]\r\n      var p0 = json.point.split('|')[0]\r\n      var p1 = json.point.split('|')[1]\r\n      var point = new BMap.Point(p0, p1)\r\n      map.centerAndZoom(point, 20)\r\n      var iconImg = this.createIcon(json.icon)\r\n      var marker = new BMap.Marker(point, { icon: iconImg })\r\n      var iw = this.createInfoWindow(i)\r\n      var label = new BMap.Label(json.title, {\r\n        offset: new BMap.Size(json.icon.lb - json.icon.x + 10, -20)\r\n      })\r\n      marker.setLabel(label)\r\n      map.addOverlay(marker)\r\n      label.setStyle({\r\n        borderColor: '#808080',\r\n        color: '#333',\r\n        cursor: 'pointer'\r\n      })\r\n\r\n      var index = i\r\n      var _iw = _this.createInfoWindow(i)\r\n      var _marker = marker\r\n      _marker.addEventListener('click', function() {\r\n        this.openInfoWindow(_iw)\r\n      })\r\n      _iw.addEventListener('open', function() {\r\n        _marker.getLabel().hide()\r\n      })\r\n      _iw.addEventListener('close', function() {\r\n        _marker.getLabel().show()\r\n      })\r\n      label.addEventListener('click', function() {\r\n        _marker.openInfoWindow(_iw)\r\n      })\r\n      if (json.isOpen) {\r\n        label.hide()\r\n        _marker.openInfoWindow(_iw)\r\n      }\r\n    },\r\n    nowpoint() {\r\n      var _this = this\r\n      var json = this.nowpoints[0]\r\n      console.log(json.point)\r\n      var p0 = json.point.split('|')[0]\r\n      var p1 = json.point.split('|')[1]\r\n      console.log(_this, json.point)\r\n      var point = new BMap.Point(p0, p1)\r\n      map.centerAndZoom(point, 16)\r\n      var iconImg = this.createIcon(json.icon)\r\n      var marker = new BMap.Marker(point, { icon: iconImg })\r\n      var iw = this.createInfoWindow(0)\r\n      var label = new BMap.Label(json.title, {\r\n        offset: new BMap.Size(json.icon.lb - json.icon.x + 10, -20)\r\n      })\r\n      marker.setLabel(label)\r\n      map.addOverlay(marker)\r\n      label.setStyle({\r\n        borderColor: '#808080',\r\n        color: '#333',\r\n        cursor: 'pointer'\r\n      })\r\n\r\n      var index = 0\r\n      var _iw = _this.createInfoWindow(0)\r\n      var _marker = marker\r\n      _marker.addEventListener('click', function() {\r\n        this.openInfoWindow(_iw)\r\n      })\r\n      _iw.addEventListener('open', function() {\r\n        _marker.getLabel().hide()\r\n      })\r\n      _iw.addEventListener('close', function() {\r\n        _marker.getLabel().show()\r\n      })\r\n      label.addEventListener('click', function() {\r\n        _marker.openInfoWindow(_iw)\r\n      })\r\n      if (json.isOpen) {\r\n        label.hide()\r\n        _marker.openInfoWindow(_iw)\r\n      }\r\n    },\r\n    createInfoWindow(i) {\r\n      var json = this.markerArr[i]\r\n      var iw = new BMap.InfoWindow(\r\n        \"<b class='iw_poi_title' title='\" +\r\n          json.title +\r\n          \"'>\" +\r\n          json.title +\r\n          \"</b><div class='iw_poi_content'>\" +\r\n          json.content +\r\n          '</div>'\r\n      )\r\n      return iw\r\n    },\r\n    createIcon(json) {\r\n      var icon = new BMap.Icon(\r\n        'http://developer.baidu.com/map/jsdemo/img/car.png',\r\n        new BMap.Size(json.w, json.h),\r\n        {\r\n          imageOffset: new BMap.Size(-json.l, -json.t),\r\n          infoWindowOffset: new BMap.Size(json.lb + 5, 1),\r\n          offset: new BMap.Size(json.x, json.h)\r\n        }\r\n      )\r\n      return icon\r\n    },\r\n\r\n    addPolyline() {\r\n      for (var i = 0; i < this.plPoints.length; i++) {\r\n        var json = this.plPoints[i]\r\n        var points = []\r\n        for (var j = 0; j < json.points.length; j++) {\r\n          var p1 = json.points[j].split('|')[0]\r\n          var p2 = json.points[j].split('|')[1]\r\n          var point = new BMap.Point(p1, p2)\r\n          map.centerAndZoom(point, 16)\r\n          points.push(new BMap.Point(p1, p2))\r\n        }\r\n        var line = new BMap.Polyline(points, {\r\n          strokeStyle: json.style,\r\n          strokeWeight: json.weight,\r\n          strokeColor: json.color,\r\n          strokeOpacity: json.opacity\r\n        })\r\n        map.addOverlay(line)\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}