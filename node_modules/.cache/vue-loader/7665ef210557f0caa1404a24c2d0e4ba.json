{"remainingRequest":"/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo-biyue/src/views/nested/fenceCreate/fenceInCreate/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo-biyue/src/views/nested/fenceCreate/fenceInCreate/index.vue","mtime":1557176484000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import '../../static/css/gateMana/common.css'\r\n// import '../../static/css/gateMana/dianziweilan.css'\r\n// import '../../static/js/iconfont.js'\r\nimport * as d3 from 'd3'\r\n// 禁用浏览器右击事件\r\ndocument.oncontextmenu = function (e) {\r\n  e.preventDefault()\r\n}\r\nexport default {\r\n  created () {\r\n    this.addBusinessVisible()\r\n    // this.draw = SVG('svgDemo').size('100%', '100%')\r\n    // console.log(document.getElementById('selectShape').currentScale)\r\n    // window.getElementById('selectShape').currentScale = window.documen.getElementById('selectShape').currentScale * 1.5\r\n  },\r\n  data () {\r\n    return {\r\n      options: {\r\n        text: '测试加载',\r\n        target: document.getElementById('el-table')\r\n      },\r\n      pForm: {\r\n        cx: 0,\r\n        cy: 0\r\n      },\r\n      buildOptions: [],\r\n      floorOptions: [],\r\n      addWidth: '', // 增加商家和偏移宽度\r\n      addBusLabelWidth: '', // 增加商家标签偏移宽度\r\n      tableWidth: '', // 表格宽度\r\n      loadingText: '正在拼命加载中,请稍等......',\r\n      addBusVisible: false, // 增加商家是否可见\r\n      loading2: false, // 加载\r\n      loading: false, // 页面加载\r\n      Note: '', // 提交提示\r\n      pointVisible: false, // 加载弹窗是否显示\r\n      svg: function () { // 地图svg对象\r\n        let svgDiv = d3.select(this.$el).selectAll('#svgmap')\r\n        let svg = svgDiv.selectAll('svg')\r\n        return svg\r\n      },\r\n      svgAdd: function () { // 地图svg对象\r\n        let svgDiv = d3.select(this.$el).select('.svgAdd').select('#svgmap')\r\n        let svg = svgDiv.select('svg')\r\n        return svg\r\n      },\r\n      viewBox: function () { // svg中的viewBox属性\r\n        // let svgDiv = d3.select(this.$el).select('#svgmap')\r\n        // let svg = svgDiv.select('svg')\r\n        let viewBox = this.svg().attr('viewBox').split(' ')\r\n        for (let i = 0; i < viewBox.length; i++) {\r\n          viewBox[i] = parseInt(viewBox[i])\r\n        }\r\n        return viewBox\r\n      },\r\n      svgSelect: {\r\n        addpointVisible: true, // 增加商家地图上方坐标位置是否可见\r\n        center: [], // 选到的中心坐标\r\n        centerXList: [], // 中心X坐标数组\r\n        centerYList: [], // 中心Y坐标数组\r\n        isCursor: false, // 是否选择右上角标记\r\n        svgStr: '',\r\n        floorList: [\r\n          {select: 'F1'},\r\n          {select: 'F2'},\r\n          {select: 'F3'}\r\n        ] // 机场楼层数目列表\r\n      },\r\n      markClick: false, // 地图右上角标记点\r\n      clientX: 0, // 存储x的坐标\r\n      clientY: 0, // 存储y的坐标\r\n      fileList: [],\r\n      addVisible: false,\r\n      filterForm: {\r\n        buildName: '',\r\n        floor: 0\r\n      },\r\n      formLabelWidth: '30%',\r\n      addForm: {\r\n        pointAddress: '',\r\n        placeName: '', // 商家名称\r\n        latitude: '',\r\n        longitude: '',\r\n        address: '',\r\n        floor: 1,\r\n        cx: 0,\r\n        cy: 0,\r\n        labelIds: [],\r\n        labelList: [],\r\n        terminalId: [],\r\n        terminalName: []\r\n      },\r\n      addRules: {}\r\n    }\r\n  },\r\n  computed: {\r\n    setAddPoint () {\r\n      return this.addForm.floor + 'F (' + this.addForm.longitude + ',' + this.addForm.latitude + ')'\r\n      /**\r\n       * self.addForm.latitude = self.svgSelect.center[0]\r\n          self.addForm.longitude = self.svgSelect.center[1]\r\n          self.editForm.latitude = self.svgSelect.center[0]\r\n          self.editForm.longitude = self.svgSelect.center[1]\r\n       */\r\n    }\r\n  },\r\n  methods: {\r\n    /** ************************************* 前端显示选择地图等 *************************************** */\r\n    getCenterFun (pointList) {\r\n      function Point (x, y) {\r\n        this.x = x\r\n        this.y = y\r\n      }\r\n      // Contour object\r\n      function Contour (a) {\r\n        this.pts = [] // an array of Point objects defining the contour\r\n      }\r\n      Contour.prototype.area = function () {\r\n        var area = 0\r\n        var pts = this.pts\r\n        var nPts = pts.length\r\n        var j = nPts - 1\r\n        var p1\r\n        var p2\r\n        for (var i = 0; i < nPts; j = i++) {\r\n          p1 = pts[i]\r\n          p2 = pts[j]\r\n          area += p1.x * p2.y\r\n          area -= p1.y * p2.x\r\n        }\r\n        area /= 2\r\n        return area\r\n      }\r\n      Contour.prototype.centroid = function () {\r\n        var pts = this.pts\r\n        var nPts = pts.length\r\n        var x = 0\r\n        var y = 0\r\n        var f\r\n        var j = nPts - 1\r\n        var p1\r\n        var p2\r\n        for (var i = 0; i < nPts; j = i++) {\r\n          p1 = pts[i]\r\n          p2 = pts[j]\r\n          f = p1.x * p2.y - p2.x * p1.y\r\n          x += (p1.x + p2.x) * f\r\n          y += (p1.y + p2.y) * f\r\n        }\r\n        f = this.area() * 6\r\n        return new Point({x: x / f, y: y / f})\r\n      }\r\n      var polygon = pointList\r\n      let con = new Contour()\r\n      con.pts = polygon\r\n      let c = con.centroid()\r\n      c.x.x = c.x.x.toFixed(4)\r\n      c.x.y = c.x.y.toFixed(4)\r\n      return c.x\r\n    },\r\n    // 初始化地图时设置每个地区的地标\r\n    initAllStyle (Form, svgStr) {\r\n      // let floor = svgStr.split('shougang')[1].split('.')[0]\r\n      // let self = this\r\n      d3.selectAll('.businessSelect').remove()\r\n      d3.selectAll('.haveselect').remove()\r\n      let para = {\r\n        header: JSON.stringify({\r\n          token: sessionStorage.getItem('token')\r\n        }),\r\n        body: JSON.stringify({})\r\n      }\r\n      console.log(para)\r\n    },\r\n    // 加载svg地图文件\r\n    loadSvgMap (svgStr, Form) {\r\n      let self = this\r\n      let svgDiv = d3.select(this.$el).selectAll('#svgmap')\r\n      let promise = new Promise(function (resolve, reject) { // 地图加载完之后在执行\r\n        // 载入svg文件\r\n        d3.xml(svgStr,\r\n          function (xml) {\r\n            // 获取xml文件内容，并转化为string字符串\r\n            let strinit = xml.documentElement\r\n            let str = ''\r\n            if (strinit.outerHTML) {\r\n              str = strinit.outerHTML\r\n            } else {\r\n              var div = document.createElement('div')\r\n              div.appendChild(strinit)\r\n              str = div.innerHTML\r\n            }\r\n            // 在div中插入svg地图\r\n            svgDiv.html(str)\r\n            // 选取svg对象\r\n            let svg = svgDiv.selectAll('svg')\r\n            let storage = window.localStorage\r\n            storage.originViewBox = svg.attr('viewBox')\r\n            svg.attr('width', 800)\r\n               .attr('height', 500)\r\n            self.initAllStyle(Form, svgStr) // 初始化地图，设置每个地区的地标，各个样式等\r\n            resolve()\r\n          })\r\n      })\r\n      // 地图加载完成\r\n      promise.then(function () {\r\n        self.bindDrag(Form)\r\n      })\r\n      // promise.then(this.bindDrag)\r\n      promise.then(function () {\r\n        self.bindClick(Form)\r\n      })\r\n    },\r\n    // 绑定拖动事件drag\r\n    bindDrag (Form) {\r\n      let _svg = this.svg()\r\n      if (Form === 'addForm') {\r\n        _svg = this.svgAdd()\r\n      }\r\n      // 获得原始svg的viewBox属性\r\n      let storage = window.localStorage\r\n      let originViewBox = storage.originViewBox.split(' ')\r\n      /**\r\n         * 修改viewBox完成平移缩放\r\n         * **/\r\n      let drag = d3.drag()\r\n        .on('start', function (d) {\r\n        })\r\n        .on('end', function (d) {\r\n        })\r\n        .on('drag', function (d) {\r\n          d3.select(this) // 移动效果就是改变viewBox（0,0,1000,1000）的前两个值\r\n            .attr('viewBox', function (d) {\r\n              let viewBox = _svg.attr('viewBox').split(' ') // 拆分viewBox的值为数组\r\n              let ratio = 500 / viewBox[2]\r\n              let flagx = 1 // 图片水平方向是否能够拖动，1为能\r\n              let flagy = 1 // 图片竖直方向是否能够拖动，0为不能\r\n              // 以下为判断图片水平和竖直方向能否拖动\r\n              if (parseInt(viewBox[0]) + parseInt(viewBox[2]) <= parseInt(viewBox[2]) && (d3.event.dx >= 0)) {\r\n                flagx = 0\r\n                viewBox[0] = 0\r\n              }\r\n              if ((parseInt(viewBox[0]) + parseInt(viewBox[2]) >= parseInt(originViewBox[2])) && (d3.event.dx < 0)) {\r\n                flagx = 0\r\n                viewBox[0] = parseInt(originViewBox[2]) - parseInt(viewBox[2])\r\n              }\r\n              if (parseInt(viewBox[2]) === parseInt(originViewBox[2])) {\r\n                flagx = 0\r\n                viewBox[0] = 0\r\n              }\r\n              if (parseInt(viewBox[1]) + parseInt(viewBox[3]) <= parseInt(viewBox[3])) {\r\n                if (parseInt(viewBox[1]) + parseInt(viewBox[3]) <= parseInt(viewBox[3]) && d3.event.dy <= 0) {\r\n                  flagy = 1\r\n                } else {\r\n                  flagy = 0\r\n                  viewBox[1] = 0\r\n                }\r\n              }\r\n              if (parseInt(viewBox[1]) + parseInt(viewBox[3]) >= parseInt(originViewBox[3])) {\r\n                if (d3.event.dy >= 0 && parseInt(viewBox[1]) + parseInt(viewBox[3]) >= parseInt(originViewBox[3])) {\r\n                  flagy = 1\r\n                } else {\r\n                  flagy = 0\r\n                  viewBox[1] = parseInt(originViewBox[3]) - parseInt(viewBox[3])\r\n                }\r\n              }\r\n              if (parseInt(viewBox[3]) === parseInt(originViewBox[3])) {\r\n                flagy = 0\r\n              }\r\n              if (flagx) {\r\n                viewBox[0] = parseInt(viewBox[0]) - d3.event.dx / ratio\r\n              } else {\r\n              }\r\n              if (flagy) {\r\n                viewBox[1] = parseInt(viewBox[1]) - d3.event.dy / ratio\r\n              } else {\r\n              }\r\n              let viewBoxStr = `${viewBox[0]} ${viewBox[1]} ${viewBox[2]} ${viewBox[3]}` // 拼接为viewBox字符串\r\n              return viewBoxStr\r\n            })\r\n        })\r\n      _svg.call(drag)\r\n    },\r\n    // 绑定点击事件\r\n    bindClick (Form) {\r\n      let self = this\r\n      // 选择所有的多边形polygon\r\n      let polygon = this.svg().selectAll('polygon')\r\n      let rect = this.svg().selectAll('rect')\r\n      let pointVisible = ''\r\n      Form === 'addForm' ? pointVisible = 'addpointVisible' : pointVisible = 'editpointVisible'\r\n      // 绑定鼠标按下矩形时事件\r\n      rect.on('mousedown', function () {\r\n        // 获取具体的鼠标事件，0为左键，1为滚轮，2为右键\r\n        let button = d3.event.button\r\n        let selfD3 = d3.select(this)\r\n        // let color = selfD3.attr('fill')\r\n        if ((button === 2 && self.markClick === false) || (button === 0 && self.markClick === true)) {\r\n          self.svgSelect[pointVisible] = true\r\n          // 获得鼠标选取的矩形平均中心点\r\n          self.svgSelect.center = self.getRectCenter(selfD3)\r\n          self[Form].latitude = self.svgSelect.center.y\r\n          self[Form].longitude = self.svgSelect.center.x\r\n          self[Form].pointAddress = self[Form].floor + 'F (' + self[Form].longitude + ', ' + self[Form].latitude + ')'\r\n          self[Form].cx = self[Form].longitude\r\n          self[Form].cy = self[Form].latitude\r\n          console.log(self[Form].cx)\r\n          if (self.svgSelect.center.x) {\r\n            d3.selectAll('.haveselect').remove()\r\n            d3.selectAll('.editselect').remove()\r\n            let location = d3.selectAll('#XMLID_1_')\r\n            .append('g')\r\n            .attr('transform', function (d) {\r\n              // 计算标注点的位置\r\n              return 'translate(' + parseFloat(self.svgSelect.center.x) + ',' + parseFloat(self.svgSelect.center.y) + ')'\r\n            })\r\n            location.append('svg:image')\r\n              .attr('class', 'haveselect')\r\n              .attr('xlink:href', '../../static/img/icon.png')\r\n              .attr('width', 50)\r\n              .attr('height', 50)\r\n              .attr('x', -25)\r\n              .attr('y', -45)\r\n              // .attr('y', -40)\r\n            location.append('svg:circle')\r\n              .attr('cx', -30)\r\n              .attr('cy', -30)\r\n              .attr('r', 20)\r\n          }\r\n          self.svgSelect.center = []\r\n        } else if (button === 2 && self.markClick === true) {\r\n          self.svgSelect[pointVisible] = true\r\n          self.markClick = false\r\n        }\r\n      })\r\n      // 绑定鼠标按下多边形事件\r\n      polygon.on('mousedown', function () {\r\n        // 获取具体的鼠标事件，0为左键，1为滚轮，2为右键\r\n        let button = d3.event.button\r\n        let selfD3 = d3.select(this)\r\n        // let color = selfD3.attr('fill')\r\n        if ((button === 2 && self.markClick === false) || (button === 0 && self.markClick === true)) {\r\n          self.svgSelect[pointVisible] = true\r\n          if (self.markClick === true) {\r\n            // 取消标记\r\n            // self.markClick = false\r\n          }\r\n          // 获得鼠标选取的多边形平均中心点\r\n          self.svgSelect.center = self.getPolygonCenter(selfD3.attr('points').split(' '))\r\n          self[Form].latitude = self.svgSelect.center.y\r\n          self[Form].longitude = self.svgSelect.center.x\r\n          self[Form].pointAddress = self[Form].floor + 'F (' + self[Form].longitude + ', ' + self[Form].latitude + ')'\r\n          self[Form].cx = self[Form].longitude / 10\r\n          self[Form].cy = self[Form].latitude / 10\r\n          console.log(self[Form].cx)\r\n          if (self.svgSelect.center.x) {\r\n            d3.selectAll('.haveselect').remove()\r\n            d3.selectAll('.editselect').remove()\r\n            let location = d3.selectAll('#XMLID_1_')\r\n            .append('g')\r\n            .attr('transform', function (d) {\r\n              // 计算标注点的位置\r\n              return 'translate(' + parseFloat(self.svgSelect.center.x) + ',' + parseFloat(self.svgSelect.center.y) + ')'\r\n            })\r\n            location.append('svg:image')\r\n              .attr('class', 'haveselect')\r\n              .attr('xlink:href', '../../static/img/icon.png')\r\n              .attr('width', 60)\r\n              .attr('height', 60)\r\n              .attr('x', -30)\r\n              .attr('y', -45)\r\n            location.append('svg:circle')\r\n              .attr('cx', -30)\r\n              .attr('cy', -30)\r\n              .attr('r', 20)\r\n          }\r\n        } else if (button === 2 && self.markClick === true) {\r\n          self.svgSelect[pointVisible] = true\r\n          self.markClick = false\r\n        }\r\n      })\r\n      // 整个svg绑定一个右击事件，取消标记的选择状态\r\n      this.svg().on('mousedown', function () {\r\n        let button = d3.event.button\r\n        if (self.markClick === true) {\r\n          if (button === 2) {\r\n            self.markClick = false\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 获取所选rect中心\r\n    getRectCenter (selfD3) {\r\n      let finalList = [] // 最终中心点\r\n      let initx = parseFloat(selfD3.attr('x')) + parseFloat(selfD3.attr('width')) / 2\r\n      let inity = parseFloat(selfD3.attr('y')) + parseFloat(selfD3.attr('height')) / 2\r\n      if (selfD3.attr('transform')) {\r\n        let pointsAttr = selfD3.attr('transform').split('matrix')[1].split('(')[1].split(')')[0].split(' ')\r\n        let pointsAttrList = [] // 对矩形transform属性进行处理得到的数组\r\n        for (let i = 0; i < pointsAttr.length; i++) {\r\n          if (pointsAttr[i] !== '') {\r\n            pointsAttrList.push(pointsAttr[i])\r\n          }\r\n        }\r\n        // a,b,c,d,e,f为rect中的transform(matrix)属性\r\n        let a = parseFloat(pointsAttrList[0])\r\n        let b = parseFloat(pointsAttrList[1])\r\n        let c = parseFloat(pointsAttrList[2])\r\n        let d = parseFloat(pointsAttrList[3])\r\n        let e = parseFloat(pointsAttrList[4])\r\n        let f = parseFloat(pointsAttrList[5])\r\n        finalList.push({\r\n          'x': (a * initx + inity * c + e).toFixed(4),\r\n          'y': (b * initx + inity * d + f).toFixed(4)\r\n        })\r\n      } else {\r\n        finalList.push({\r\n          'x': initx.toFixed(4),\r\n          'y': inity.toFixed(4)\r\n        })\r\n      }\r\n      return finalList[0]\r\n    },\r\n    // 获得所选polygon中心\r\n    getPolygonCenter (pointsAttr) {\r\n      let pointsAttrList = [] // 对多边形points属性进行处理得到的数组\r\n      for (let i = 0; i < pointsAttr.length; i++) {\r\n        if (pointsAttr[i] !== '') {\r\n          pointsAttrList.push(pointsAttr[i])\r\n        }\r\n      }\r\n      let totalList = []\r\n      let totalCenter = ''\r\n      for (let i = 0; i < pointsAttrList.length; i++) {\r\n        totalList.push({\r\n          'x': parseFloat(pointsAttrList[i].split(',')[0]),\r\n          'y': parseFloat(pointsAttrList[i].split(',')[1])\r\n        })\r\n      }\r\n      // var polygon = [\r\n      //   {'x': 770.3423, 'y': 400.5555},\r\n      //   {'x': 529.3434, 'y': 643.2353},\r\n      //   {'x': 320.3455, 'y': 494.8865},\r\n      //   {'x': 424.3477, 'y': 381.5678},\r\n      //   {'x': 459.3488, 'y': 369.2332}\r\n      // ]\r\n      totalCenter = this.getCenterFun(totalList)\r\n      return totalCenter\r\n    },\r\n    // 改变viewBox的大小，形成地图缩放的效果\r\n    // i<0，扩大viewBox，视觉效果位地图缩小\r\n    changeViewBoxSize (i) {\r\n      // 获取原始viewBox\r\n      let storage = window.localStorage\r\n      let originViewBox = storage.originViewBox.split(' ')\r\n      let viewMax = parseInt(originViewBox[2]) // viewBox最大值\r\n      let viewMin = parseInt(originViewBox[2]) - 100 * 5 // viewBox最小值\r\n      let viewBox = this.viewBox()\r\n      if (i < 0) {\r\n        // 注：viewBox[2]越大，则显得地图越小，所以点击缩小即为增加viewBox[2]和[3]\r\n        // 如果viewBox大小的值大于最大值，直接赋值最大值\r\n        viewBox[2] >= viewMax ? viewBox[2] = viewBox[3] = viewMax : viewBox[2] = viewBox[3] = viewBox[2] + 100\r\n      } else {\r\n        viewBox[2] <= viewMin ? viewBox[2] = viewBox[3] = viewMin : viewBox[2] = viewBox[3] = viewBox[2] - 100\r\n      }\r\n      // 设置viewBox属性\r\n      let viewBoxStr = `${viewBox[0]} ${viewBox[1]} ${viewBox[2]} ${viewBox[3]}`\r\n      this.svg().attr('viewBox', viewBoxStr)\r\n    },\r\n    // 标记选择状态\r\n    markClickButton () {\r\n      this.markClick = true\r\n    },\r\n    // 获取鼠标当前的坐标\r\n    getXY (event) {\r\n      this.clientX = event.clientX\r\n      this.clientY = event.clientY\r\n    },\r\n    /** ************************************* 前端处理数据格式，显示等 *************************************** */\r\n    // 点击关闭增加商家，取消地图所选商家，\r\n    closeAddPoint () {\r\n      this.addForm.pointAddress = ''\r\n      this.svgSelect.addpointVisible = false\r\n      d3.selectAll('.haveselect').remove()\r\n    },\r\n    // 点击关闭增加商家弹窗时重置addForm数据\r\n    clearAddForm () {\r\n      this.$nextTick(function () {\r\n        this.$refs['addForm'].resetFields()\r\n        this.svgSelect.floorList.forEach((item) => {\r\n          if (!item.active) {\r\n            this.$set(item, 'active')\r\n          }\r\n          this.$set(item, 'active', false)\r\n        })\r\n      })\r\n      // this.$refs['uploadImg'].uploadFiles = []\r\n      this.setLabelDropDown(this.addForm.allLabelList, 'addForm')\r\n      this.svgSelect.addpointVisible = false\r\n      this.addForm.floor = 1\r\n      // this.addForm.floor = 3\r\n      this.addForm.address = ''\r\n      this.addImgVisible = true\r\n    },\r\n    // 重置表单\r\n    resetForm (formName) {\r\n      this.$nextTick(function () {\r\n        this.$refs[formName].resetFields()\r\n        if (formName === 'addForm') {\r\n          this.$refs['uploadImg'].clearFiles()\r\n        }\r\n      })\r\n    },\r\n    // 点击弹窗“关闭”提交数据增加商家\r\n    submitAddBus () {\r\n      this.$refs['addForm'].validate((valid) => {\r\n        if (valid) {\r\n          this.selectLabel('addForm') // 选择标签后再次保存\r\n          let file = this.$refs['uploadImg'].uploadFiles[0]\r\n          if (this.addForm.pointAddress === '') {\r\n            this.$message.warning('请在基本资料中选择商家坐标')\r\n            return false\r\n          }\r\n          if (this.addForm.labelIds.length === 0) {\r\n            this.$message.warning('请在标签设置中选择商家标签')\r\n            return false\r\n          }\r\n          if (file) {\r\n            this.$refs.uploadImg.submit()\r\n          } else {\r\n            this.addBusinessFro()\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 点击增加商家按钮\r\n    addBusinessVisible () {\r\n      this.addBusVisible = true\r\n      this.BusVisible = false\r\n      this.editBusVisible = false\r\n      this.addBusLabelVisible = false\r\n      // this.addVisible = true\r\n      // 元素加载完成后加载地图\r\n      this.$nextTick(() => {\r\n        let svgStr = '../../static/shougang1.svg'\r\n        // let svgStr = '../../../static/shougang1.svg'\r\n        this.loadSvgMap(svgStr, 'addForm')\r\n        this.addForm.pointAddress = '' // 点击增加商家初始化地图上方选择图标位置，毕竟编辑中的覆盖\r\n      })\r\n    },\r\n    // 增加商家“删除”暂存列表图片\r\n    addhandleRemove (file, fileList) {\r\n      this.addImgVisible = true\r\n    },\r\n    // 重置表单\r\n    resetError (formName) {\r\n      this.$nextTick(function () {\r\n        this.$refs[formName].resetFields()\r\n      })\r\n    },\r\n    /** ************************************* 提交后台相关函数 *************************************** */\r\n    // 向后台和图片一起提交添加商家表单\r\n    addBusinessFro () {\r\n      let file = this.$refs['uploadImg'].uploadFiles[0]\r\n      // let fileValue = document.querySelector('.el-upload-img .el-upload__input')\r\n      let para = new FormData()\r\n      if (file) { // 如果有图片\r\n        para.append('imge', file.raw)\r\n      }\r\n      // this.addForm.labelIds = [1, 2, 3]\r\n      para.append('header', JSON.stringify({\r\n        'token': sessionStorage.getItem('token'),\r\n        'beanId': 'businessManageService_v1'\r\n      }))\r\n      para.append('body', JSON.stringify({\r\n        // 'address': this.addForm.airportName + this.addForm.terminalName + this.addForm.floor + '楼',\r\n        'address': this.addForm.address,\r\n        'airportId': this.addForm.airportId,\r\n        'placeName': this.addForm.placeName,\r\n        'latitude': this.addForm.latitude,\r\n        'longitude': this.addForm.longitude,\r\n        'floor': this.addForm.floor,\r\n        'labelIds': this.addForm.labelIds,\r\n        'terminalId': this.addForm.terminalId[0]\r\n      }))\r\n      this.addForm.file = file\r\n      // apiBus.addBusiness(para).then(res => {\r\n      console.log(para)\r\n    }\r\n  },\r\n  watch: {\r\n    // 监测标记按钮是否点击\r\n    markClick: function (newMark, oldMark) {\r\n      if (newMark === true) {\r\n        // 如果点击，切换鼠标为画笔样式\r\n        this.svgSelect.isCursor = true\r\n        /* let span = d3.select(this.$el).append('span')\r\n        span.text('鼠标左键点击，鼠标右键取消')\r\n          .style('position', 'absolute')\r\n          .style('left', this.clientX + 20 + 'px')\r\n          .style('top', this.clientY + 'px')\r\n          // 绑定鼠标移动事件\r\n        document.onmousemove = function (e) {\r\n          span.style('left', e.clientX + 20 + 'px')\r\n          span.style('top', e.clientY + 'px')\r\n        } */\r\n      } else if (newMark === false) {\r\n        // d3.select(this.$el).select('span').remove()\r\n        this.svgSelect.isCursor = false\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.tableWidth = document.body.scrollWidth - 239 - 20\r\n    this.addWidth = (document.body.scrollWidth - 219) / 2 - (800 / 2) - 200\r\n    this.addBusLabelWidth = (document.body.scrollWidth - 219) / 2 - (944 / 2) - 20\r\n  }\r\n}\r\n",null]}