{"remainingRequest":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/nested/fenceCreate/fenceOutCreate/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/src/views/nested/fenceCreate/fenceOutCreate/index.vue","mtime":1557892325540},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/biyue/Documents/LanHuo/LanHuo-biyue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import '../../static/css/gateMana/common.css'\r\nimport '@/static/font/css/font-awesome.css'\r\n// import '../../static/css/gateMana/dianziweilan.css'\r\n// import BMap from 'BMap'\r\n// import BMapLib from 'BMapLib'\r\n// import BMapSymbolSHAPEPOINT from 'BMap_Symbol_SHAPE_POINT'\r\nexport default {\r\n  data() {\r\n    return {\r\n      polygonPath: [\r\n        { lng: 116.411689, lat: 39.914059 },\r\n        { lng: 116.403641, lat: 39.914059 },\r\n        { lng: 116.403641, lat: 39.921336 },\r\n        { lng: 116.411689, lat: 39.921336 }\r\n      ],\r\n      para: [],\r\n      circleShow: false,\r\n      polygonShow: false,\r\n      pointShow: false,\r\n      fenceShape: [],\r\n      circlePath: {\r\n        center: {\r\n          lng: 116.404,\r\n          lat: 39.915\r\n        },\r\n        radius: 500\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  mounted() {\r\n    this.tableWidth = document.body.scrollWidth - 259 - 20\r\n    // this.baiduMap()\r\n  },\r\n  methods: {\r\n    /** ********************************* 页面处理数据格式等函数 ************************************************ */\r\n    fenceCreate() {\r\n      this.sendPath()\r\n      this.$router.push({\r\n        name: 'fenceCreateInfo',\r\n        // path: '/fenceCreateInfo',\r\n        params: {\r\n          shape: this.para\r\n        }\r\n      })\r\n    },\r\n    updatePolygonPath(e) {\r\n      this.polygonPath = e.target.getPath()\r\n    },\r\n    updateCirclePath(e) {\r\n      // console.log('target center:' + e.target.getCenter())\r\n      // console.log('target radius:' + e.target.getRadius())\r\n      this.circlePath.center = e.target.getCenter()\r\n      this.circlePath.radius = e.target.getRadius()\r\n      console.log('fenceShape[0] is:' + this.fenceShape[0])\r\n      console.log('Now new circlePath center lng is:' + this.circlePath.center.lng)\r\n      console.log('Now new circlePath center lnt is:' + this.circlePath.center.lat)\r\n      console.log('Now new circlePath radius is:' + this.circlePath.radius)\r\n    },\r\n    draw(type) {\r\n      if (type === 'circle') {\r\n        this.circleShow = true\r\n        console.log('Now circleShow is true')\r\n        this.polygonShow = false\r\n        if (this.pointShow === true) {\r\n          this.circlePath.center.lng = this.fenceShape[0]\r\n          this.circlePath.center.lat = this.fenceShape[1]\r\n          this.pointShow = false\r\n          this.fenceShape = []\r\n        }\r\n      } else if (type === 'polygon') {\r\n        this.polygonShow = true\r\n        this.circleShow = false\r\n        if (this.pointShow === true) {\r\n          this.polygonPath[0].lng = this.fenceShape[0] + 0.008\r\n          this.polygonPath[0].lat = this.fenceShape[1] - 0.006\r\n          this.polygonPath[1].lng = this.fenceShape[0] - 0.008\r\n          this.polygonPath[1].lat = this.fenceShape[1] - 0.006\r\n          this.polygonPath[2].lng = this.fenceShape[0] - 0.008\r\n          this.polygonPath[2].lat = this.fenceShape[1] + 0.006\r\n          this.polygonPath[3].lng = this.fenceShape[0] + 0.008\r\n          this.polygonPath[3].lat = this.fenceShape[1] + 0.006\r\n          this.pointShow = false\r\n          this.fenceShape = []\r\n        }\r\n        this.pointShow = false\r\n        this.fenceShape = []\r\n      } else if (type === 'point') {\r\n        this.pointShow = true\r\n      } else {\r\n        this.circleShow = false\r\n        this.polygonShow = false\r\n        this.pointShow = false\r\n        this.fenceShape = []\r\n      }\r\n    },\r\n    selectPoint(e) {\r\n      if (this.pointShow === true) {\r\n        this.fenceShape.push(e.point.lng)\r\n        this.fenceShape.push(e.point.lat)\r\n        // this.pointShow = false\r\n        // this.circlePath.center = e.target\r\n      }\r\n      console.log('fenceShape is:' + this.fenceShape)\r\n      console.log('circlePath1=' + this.circlePath)\r\n    },\r\n    sendPath() {\r\n      if (this.circleShow === true) {\r\n        // if (this.circlePath !== null) {\r\n        //   para.push({\r\n        //     Longitude: this.circlePath.center.lng,\r\n        //     Latitude: this.circlePath.center.lat,\r\n        //     Radius: this.circlePath.radius\r\n        //   })\r\n        //   console.log('circlePath2=' + this.circlePath)\r\n        // }\r\n\r\n      }\r\n      this.para.Longitude = this.circlePath.center.lng\r\n      this.para.Latitude = this.circlePath.center.lat\r\n      this.para.Radius = this.circlePath.radius\r\n      console.log('Para is:' + this.para.Longitude)\r\n    }\r\n  }\r\n}\r\n",null]}